[{"/usr/src/app/src/index.tsx":"1","/usr/src/app/src/App.tsx":"2","/usr/src/app/src/components/post/PostList.tsx":"3","/usr/src/app/src/lib/api/auth.ts":"4","/usr/src/app/src/lib/api/posts.ts":"5","/usr/src/app/src/components/post/PostForm.tsx":"6","/usr/src/app/src/components/post/PostItem.tsx":"7","/usr/src/app/src/components/pages/Root.tsx":"8","/usr/src/app/src/components/pages/ChatRoom.tsx":"9","/usr/src/app/src/components/pages/Users.tsx":"10","/usr/src/app/src/components/pages/SignIn.tsx":"11","/usr/src/app/src/components/pages/Home.tsx":"12","/usr/src/app/src/components/layouts/CommonLayout.tsx":"13","/usr/src/app/src/components/pages/NotFound.tsx":"14","/usr/src/app/src/components/pages/ChatRooms.tsx":"15","/usr/src/app/src/components/pages/SignUp.tsx":"16","/usr/src/app/src/lib/api/client.ts":"17","/usr/src/app/src/lib/api/chat_rooms.ts":"18","/usr/src/app/src/lib/api/messages.ts":"19","/usr/src/app/src/lib/api/users.ts":"20","/usr/src/app/src/lib/api/likes.ts":"21","/usr/src/app/src/components/layouts/Header.tsx":"22","/usr/src/app/src/components/Card/Card.tsx":"23","/usr/src/app/src/components/MainImage/MainImage.tsx":"24","/usr/src/app/src/components/utils/AlertMessage.tsx":"25","/usr/src/app/src/components/post/PostCard.tsx":"26","/usr/src/app/src/components/pages/UserPages.tsx":"27","/usr/src/app/src/components/pages/About.tsx":"28","/usr/src/app/src/components/post/PostModal.tsx":"29","/usr/src/app/src/components/post/UserModal.tsx":"30","/usr/src/app/src/components/post/PostComment.tsx":"31","/usr/src/app/src/lib/api/comments.ts":"32","/usr/src/app/src/config.js":"33"},{"size":214,"mtime":1627514037809,"results":"34","hashOfConfig":"35"},{"size":3812,"mtime":1632613192508,"results":"36","hashOfConfig":"35"},{"size":1476,"mtime":1633614340906,"results":"37","hashOfConfig":"35"},{"size":1125,"mtime":1629760976795,"results":"38","hashOfConfig":"35"},{"size":803,"mtime":1633738800401,"results":"39","hashOfConfig":"35"},{"size":3837,"mtime":1632354739723,"results":"40","hashOfConfig":"35"},{"size":3845,"mtime":1633823257110,"results":"41","hashOfConfig":"35"},{"size":2761,"mtime":1631564701722,"results":"42","hashOfConfig":"35"},{"size":6578,"mtime":1633129712374,"results":"43","hashOfConfig":"35"},{"size":8255,"mtime":1632008201813,"results":"44","hashOfConfig":"35"},{"size":4626,"mtime":1628893833018,"results":"45","hashOfConfig":"35"},{"size":10085,"mtime":1631276417787,"results":"46","hashOfConfig":"35"},{"size":791,"mtime":1631276417786,"results":"47","hashOfConfig":"35"},{"size":198,"mtime":1627552797652,"results":"48","hashOfConfig":"35"},{"size":3944,"mtime":1631276417787,"results":"49","hashOfConfig":"35"},{"size":9007,"mtime":1630615221755,"results":"50","hashOfConfig":"35"},{"size":886,"mtime":1632613895599,"results":"51","hashOfConfig":"35"},{"size":683,"mtime":1627552797656,"results":"52","hashOfConfig":"35"},{"size":217,"mtime":1632686921899,"results":"53","hashOfConfig":"35"},{"size":978,"mtime":1630613699944,"results":"54","hashOfConfig":"35"},{"size":523,"mtime":1628893833023,"results":"55","hashOfConfig":"35"},{"size":3541,"mtime":1633179857476,"results":"56","hashOfConfig":"35"},{"size":1060,"mtime":1628551230170,"results":"57","hashOfConfig":"35"},{"size":388,"mtime":1631276417786,"results":"58","hashOfConfig":"35"},{"size":1155,"mtime":1627521381194,"results":"59","hashOfConfig":"35"},{"size":1324,"mtime":1631567381376,"results":"60","hashOfConfig":"35"},{"size":7889,"mtime":1630615123829,"results":"61","hashOfConfig":"35"},{"size":1738,"mtime":1631276417787,"results":"62","hashOfConfig":"35"},{"size":1902,"mtime":1632658553956,"results":"63","hashOfConfig":"35"},{"size":6654,"mtime":1633823856048,"results":"64","hashOfConfig":"35"},{"size":4105,"mtime":1633640743302,"results":"65","hashOfConfig":"35"},{"size":470,"mtime":1633524447603,"results":"66","hashOfConfig":"35"},{"size":75,"mtime":1632950377100,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"15i068l",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"70"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},"/usr/src/app/src/index.tsx",[],["140","141"],"/usr/src/app/src/App.tsx",[],"/usr/src/app/src/components/post/PostList.tsx",[],"/usr/src/app/src/lib/api/auth.ts",[],"/usr/src/app/src/lib/api/posts.ts",[],"/usr/src/app/src/components/post/PostForm.tsx",[],"/usr/src/app/src/components/post/PostItem.tsx",["142"],"import React, { useContext, useState } from \"react\"\nimport { AuthContext } from \"App\"\n\nimport { makeStyles, Theme } from \"@material-ui/core/styles\"\nimport Card from \"@material-ui/core/Card\"\nimport CardHeader from \"@material-ui/core/CardHeader\"\nimport CardMedia from \"@material-ui/core/CardMedia\"\nimport CardContent from \"@material-ui/core/CardContent\"\nimport CardActions from \"@material-ui/core/CardActions\"\nimport Avatar from \"@material-ui/core/Avatar\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport Typography from \"@material-ui/core/Typography\"\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\"\nimport FavoriteIcon from \"@material-ui/icons/Favorite\"\nimport DeleteIcon from \"@material-ui/icons/Delete\"\n\nimport UserModal from \"./UserModal\"\nimport { Post } from \"../../interfaces/index\"\nimport { deletePost, getPosts } from \"../../lib/api/posts\"\nimport PostComment from \"./PostComment\"\n// import userEvent from \"@testing-library/user-event\"\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  card: {\n    width: 480,\n    marginTop: \"2rem\",\n    transition: \"all 0.3s\",\n    \"&:hover\": {\n      boxShadow:\n        \"1px 0px 20px -1px rgba(0,0,0,0.2), 0px 0px 20px 5px rgba(0,0,0,0.14), 0px 1px 10px 0px rgba(0,0,0,0.12)\",\n      transform: \"translateY(-3px)\"\n    }\n  },\n  delete: {\n    marginLeft: \"auto\"\n  },\n  avatar: {\n    width: theme.spacing(7),\n    height: theme.spacing(7)\n  }\n}))\n\ninterface PostItemProps {\n  post: Post\n  handleGetPosts: Function\n}\n\n\nconst PostItem = ({ post, handleGetPosts }: PostItemProps) => {\n  const { currentUser } = useContext(AuthContext)\n  const classes = useStyles()\n  const [like, setLike] = useState<boolean>(false)\n  const [posts, setPosts] = useState<Post[]>([])\n\n  const handleDeletePost = async (id: string) => {\n    await deletePost(id)\n      .then(() => {\n        handleGetPosts()\n      })\n  }\n\n  // const handleGetUserPost = async () => {\n  //   const { data } = await getPosts()\n\n  //   setPosts(data.posts)\n  // }\n  const handlePostCreateUser = async () => {\n    try {\n      const res = await getPosts()\n      console.log(res)\n\n      if (res?.status === 200) {\n        setPosts(res?.data.posts)\n      } else {\n        console.log(\"No users\")\n      }\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  return (\n    <>\n      <Card className={classes.card}>\n        <CardHeader\n          avatar={\n            <Avatar\n              alt=\"avatar\"\n              src={currentUser?.image.url} //userに紐付けたい\n              className={classes.avatar}\n            />\n          }\n          title={post?.name}\n        />\n        {post.image?.url ?\n          <CardMedia\n            component=\"img\"\n            src={post.image.url}\n            alt=\"post image\"\n          /> : null\n        }\n        <CardContent>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"span\">\n            {post.content?.split(\"\\n\").map((content: string, index: number) => {\n              return (\n                <p key={index}>{content}</p>\n              )\n            })\n            }\n          </Typography>\n        </CardContent>\n\n        <CardActions disableSpacing>\n          <IconButton onClick={() => like ? setLike(false) : setLike(true)}>\n            {like ? <FavoriteIcon /> : <FavoriteBorderIcon />}\n          </IconButton>\n          <UserModal\n            // ここにpropsを渡して、ポストに紐づいたuserを表示させる\n            handlePostCreateUser={handlePostCreateUser}\n          />\n\n        </CardActions>\n        <PostComment\n          key={post.id}\n        />\n        <div className={classes.delete}>\n          <IconButton\n            onClick={() => handleDeletePost(post.id)}\n          >\n            <DeleteIcon />\n          </IconButton>\n        </div>\n\n      </Card>\n    </>\n  )\n}\n\nexport default PostItem\n","/usr/src/app/src/components/pages/Root.tsx",[],"/usr/src/app/src/components/pages/ChatRoom.tsx",[],"/usr/src/app/src/components/pages/Users.tsx",[],"/usr/src/app/src/components/pages/SignIn.tsx",[],"/usr/src/app/src/components/pages/Home.tsx",[],"/usr/src/app/src/components/layouts/CommonLayout.tsx",[],"/usr/src/app/src/components/pages/NotFound.tsx",[],"/usr/src/app/src/components/pages/ChatRooms.tsx",[],"/usr/src/app/src/components/pages/SignUp.tsx",[],"/usr/src/app/src/lib/api/client.ts",[],"/usr/src/app/src/lib/api/chat_rooms.ts",[],"/usr/src/app/src/lib/api/messages.ts",[],"/usr/src/app/src/lib/api/users.ts",[],"/usr/src/app/src/lib/api/likes.ts",[],"/usr/src/app/src/components/layouts/Header.tsx",[],"/usr/src/app/src/components/Card/Card.tsx",[],"/usr/src/app/src/components/MainImage/MainImage.tsx",[],"/usr/src/app/src/components/utils/AlertMessage.tsx",[],"/usr/src/app/src/components/post/PostCard.tsx",[],"/usr/src/app/src/components/pages/UserPages.tsx",["143"],"import React, { useState, useEffect, useContext } from \"react\"\nimport { RouteComponentProps } from \"react-router-dom\"\nimport { Link } from \"react-router-dom\"\nimport { motion } from \"framer-motion\";\n\nimport { makeStyles, Theme } from \"@material-ui/core/styles\"\nimport { Grid, Typography } from \"@material-ui/core\"\n\nimport Dialog from \"@material-ui/core/Dialog\"\nimport DialogContent from \"@material-ui/core/DialogContent\"\n\nimport Avatar from \"@material-ui/core/Avatar\"\nimport Button from \"@material-ui/core/Button\"\nimport Divider from \"@material-ui/core/Divider\"\nimport FavoriteIcon from \"@material-ui/icons/Favorite\"\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\"\nimport { LikeFormData } from \"interfaces/index\"\nimport AlertMessage from \"components/utils/AlertMessage\"\n\nimport { getUserPages } from \"lib/api/users\"\nimport { getLikes, createLike } from \"lib/api/likes\"\nimport { User, LikeData } from \"interfaces/index\"\n\nimport { AuthContext } from \"App\"\n\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  avatar: {\n    width: theme.spacing(10),\n    height: theme.spacing(10)\n  }\n}))\n\ntype UserPagesProps = RouteComponentProps<{ id: string }>\n\n// 個別のチャットルームページ\nconst UserPages: React.FC<UserPagesProps> = (props) => {\n  const { currentUser } = useContext(AuthContext)\n  const classes = useStyles()\n\n  const id = parseInt(props.match.params.id) // URLからidを取得\n  console.log(id)\n\n  const initialUserState: User = {\n    id: 0,\n    uid: \"\",\n    provider: \"\",\n    email: \"\",\n    name: \"\",\n    image: {\n      url: \"\"\n    },\n    profile: \"\",\n    allowPasswordChange: true\n  }\n\n  const [loading, setLoading] = useState<boolean>(true)\n  const [users, setUserPages] = useState<User[]>([])\n  const [user, setUser] = useState<User>(initialUserState)\n  const [userDetailOpen, setUserDetailOpen] = useState<boolean>(false)\n  const [likedUsers, setLikedUsers] = useState<User[]>([])\n  const [likes, setLikes] = useState<LikeData[]>([])\n  const [alertMessageOpen, setAlertMessageOpen] = useState<boolean>(false)\n\n  // フォームデータを作成\n  const createFormData = (): LikeFormData => {\n    const formData = new FormData()\n\n    formData.append(\"fromUserId\", String(currentUser?.id))\n    formData.append(\"toUserId\", String(user.id))\n\n    return formData\n  }\n\n  // いいね作成\n  const handleCreateLike = async (user: User) => {\n\n    const data = createFormData()\n\n    try {\n      const res = await createLike(data)\n      console.log(res)\n\n      if (res?.status === 200) {\n        setLikes([res.data.like, ...likes])\n        setLikedUsers([user, ...likedUsers])\n\n        console.log(res?.data.like)\n      } else {\n        console.log(\"Failed\")\n      }\n\n      if (res?.data.isMatched === true) {\n        setAlertMessageOpen(true)\n        setUserDetailOpen(false)\n      }\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  // ユーザーを取得\n  const handleGetUserPages = async () => {\n    try {\n      const res = await getUserPages(id)\n      console.log(res)\n\n      if (res?.status === 200) {\n        setUserPages(res?.data.user) 　// ここを編集する\n      } else {\n        console.log(\"No users\")\n      }\n    } catch (err) {\n      console.log(err)\n    }\n\n    setLoading(false)\n  }\n\n  // いいね一覧を取得\n  const handleGetLikes = async () => {\n    try {\n      const res = await getLikes()\n      console.log(res)\n\n      if (res?.status === 200) {\n        setLikedUsers(res?.data.activeLikes)\n      } else {\n        console.log(\"No likes\")\n      }\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  useEffect(() => {\n    handleGetUserPages()\n    handleGetLikes()\n  }, [])\n\n  // すでにいいねを押されているユーザーかどうかの判定\n  const isLikedUser = (userId: number | undefined): boolean => {\n    return likedUsers?.some((likedUser: User) => likedUser.id === userId)\n  }\n\n  return (\n    <>\n      {\n        !loading ? (\n          users?.length > 0 ? (\n            <motion.div\n              animate={{ x: 0 }}\n              initial={{ x: 800 }}\n              exit={{ x: -800 }}\n              transition={{ duration: 0.4 }}>\n              <Grid container justifyContent=\"center\">\n                {\n                  users?.find((user: User, index: number) => {\n                    return (\n                      <div key={index} onClick={() => {\n                        setUser(user)\n                        setUserDetailOpen(true)\n                      }}>\n                        <Grid item style={{ margin: \"0.5rem\", cursor: \"pointer\" }}>\n                          <Avatar\n                            alt=\"avatar\"\n                            src={user?.image.url}\n                            className={classes.avatar}\n                          />\n                          <Typography\n                            variant=\"body2\"\n                            component=\"p\"\n                            gutterBottom\n                            style={{ marginTop: \"0.5rem\", textAlign: \"center\" }}\n                          >\n                            {user.name}\n                          </Typography>\n                        </Grid>\n                      </div>\n                    )\n                  })\n                }\n              </Grid>\n            </motion.div>\n          ) : (\n            <Typography\n              component=\"p\"\n              variant=\"body2\"\n              color=\"textSecondary\"\n            >\n              まだ1人もユーザーがいません。\n            </Typography>\n          )\n        ) : (\n          <></>\n        )\n      }\n      <Dialog\n        open={userDetailOpen}\n        keepMounted\n        onClose={() => setUserDetailOpen(false)}\n      >\n        <DialogContent>\n          <Grid container justifyContent=\"center\">\n            <Grid item>\n              <Avatar\n                alt=\"avatar\"\n                src={user?.image.url}\n                className={classes.avatar}\n              />\n            </Grid>\n          </Grid>\n          <Grid container justifyContent=\"center\">\n            <Grid item style={{ marginTop: \"1rem\" }}>\n              <Typography variant=\"body1\" component=\"p\" gutterBottom style={{ textAlign: \"center\" }}>\n                {user.name}\n              </Typography>\n              <Divider />\n              <Typography\n                variant=\"body2\"\n                component=\"p\"\n                gutterBottom\n                style={{ marginTop: \"0.5rem\", fontWeight: \"bold\" }}\n              >\n                自己紹介\n            </Typography>\n              <Typography variant=\"body2\" component=\"p\" color=\"textSecondary\" style={{ marginTop: \"0.5rem\" }}>\n                {user.profile ? user.profile : \"よろしくお願いします。\"}\n              </Typography>\n            </Grid>\n          </Grid>\n          <Grid container justifyContent=\"center\">\n            <Button\n              variant=\"outlined\"\n              onClick={() => isLikedUser(user.id) ? void (0) : handleCreateLike(user)}\n              color=\"secondary\"\n              startIcon={isLikedUser(user.id) ? <FavoriteIcon /> : <FavoriteBorderIcon />}\n              disabled={isLikedUser(user.id) ? true : false}\n              style={{ marginTop: \"1rem\", marginBottom: \"1rem\" }}\n            >\n              {isLikedUser(user.id) ? \"いいね済み\" : \"いいね\"}\n            </Button>\n            <Grid container justifyContent=\"center\">\n              <Button\n                component={Link}\n                to=\"/\"\n                variant=\"outlined\"\n                color=\"secondary\"\n              > 学習をくわしく見る\n          </Button>\n            </Grid>\n          </Grid>\n        </DialogContent>\n      </Dialog>\n      <AlertMessage\n        open={alertMessageOpen}\n        setOpen={setAlertMessageOpen}\n        severity=\"success\"\n        message=\"マッチングが成立しました!\"\n      />\n    </>\n  )\n}\n\nexport default UserPages\n","/usr/src/app/src/components/pages/About.tsx",[],"/usr/src/app/src/components/post/PostModal.tsx",["144"],"import React, { useEffect, useState } from \"react\"\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport PostForm from './PostForm';\nimport { getPosts } from \"../../lib/api/posts\"\nimport { Post } from \"../../interfaces/index\"\nimport Button from \"@material-ui/core/Button\"\n\n\nfunction getModalStyle() {\n  const top = 50\n  const left = 50\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    paper: {\n      position: 'absolute',\n      width: 480,\n      backgroundColor: theme.palette.background.paper,\n      border: '2px solid #000',\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(6, 8, 7),\n    },\n    button: {\n      color: \"#f87ede\",\n    },\n  }),\n);\n\nexport default function PostModal() {\n  const classes = useStyles();\n\n  const [modalStyle] = React.useState(getModalStyle);\n  const [open, setOpen] = React.useState(false);\n  const [posts, setPosts] = useState<Post[]>([])\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n\n  const handleGetPosts = async () => {\n    const { data } = await getPosts()\n\n    setPosts(data.posts)\n  }\n\n  useEffect(() => {\n    handleGetPosts()\n  }, [])\n\n\n  const body = (\n    <div style={modalStyle} className={classes.paper}>\n      <PostForm\n        handleGetPosts={handleGetPosts}\n      />\n    </div>\n  );\n\n  return (\n    <div>\n      <Button\n        onClick={handleOpen}\n        variant=\"outlined\"\n        className={classes.button}\n      >\n        作成する\n      </Button>\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        {body}\n      </Modal>\n    </div>\n  );\n}\n","/usr/src/app/src/components/post/UserModal.tsx",["145","146","147","148"],"/usr/src/app/src/components/post/PostComment.tsx",["149","150"],"import React, { useState, useEffect } from \"react\"\n\nimport { makeStyles, Theme } from \"@material-ui/core/styles\"\nimport TextField from \"@material-ui/core/TextField\"\nimport Button from \"@material-ui/core/Button\"\nimport SendIcon from \"@material-ui/icons/Send\"\nimport { Grid, Typography } from \"@material-ui/core\"\n\nimport { createComment, getComments } from \"../../lib/api/comments\"\nimport { CommentFormData } from \"interfaces/index\"\nimport { CommentData } from \"interfaces/index\"\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  form: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    width: 480\n  },\n  inputFileBtn: {\n    marginTop: \"10px\"\n  },\n  submitBtn: {\n    marginTop: \"10px\",\n    marginLeft: \"auto\"\n  },\n  formWrapper: {\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    width: \"100%\"\n  },\n  textInputWrapper: {\n    width: \"80%\"\n  },\n  button: {\n    marginLeft: theme.spacing(1)\n  }\n}))\n\nconst borderStyles = {\n  bgcolor: \"background.paper\",\n  border: 1,\n}\n\ntype CommentProps = { content?: string, key: string }\n\nconst PostComment: React.FC<CommentProps> = (props) => {\n  const classes = useStyles()\n\n  const [content, setContent] = useState<string>(\"\")\n  const [key, setKey] = useState<string>(\"\")\n  const [comments, setComments] = useState<CommentData[]>([])\n  const [loading, setLoading] = useState<boolean>(true)\n\n  const createFormData = (): CommentFormData => {\n    const formData = new FormData()\n\n    formData.append(\"content\", content)\n    formData.append(\"post_id\", key)\n\n    return formData\n  }\n\n  useEffect(() => {\n    async function handleGetComments() {\n      try {\n        const res = await getComments()\n        console.log(res)\n\n        if (res?.status === 200) {\n          // setOtherUser(res?.data.otherUser)\n          setComments(res?.data.comments)\n        } else {\n          console.log(\"No comments\")\n        }\n      } catch (err) {\n        console.log(err)\n      }\n\n      setLoading(false)\n    }\n    handleGetComments()\n  }, [])\n\n  const handleSubmit = async (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault()\n\n    const data = createFormData()\n\n    try {\n      const res = await createComment(data)\n      if (res.status === 200) {\n        setComments([...comments, res.data.comment])\n        setContent(\"\")\n        setKey(\"\")\n        console.log(res)\n      }\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  // Railsから渡ってくるtimestamp（ISO8601）をdatetimeに変換\n  const iso8601ToDateTime = (iso8601: string) => {\n    const date = new Date(Date.parse(iso8601))\n    const year = date.getFullYear()\n    const month = date.getMonth() + 1\n    const day = date.getDate()\n    const hour = date.getHours()\n    const minute = date.getMinutes()\n\n    return year + \"年\" + month + \"月\" + day + \"日\" + hour + \"時\" + minute + \"分\"\n  }\n\n\n  return (\n    <>\n      {\n        comments.map((comment: CommentData, index: number) => {\n          return (\n            <Grid key={index} container justifyContent=\"flex-start\" >\n              <Grid item>\n\n                <Typography variant=\"body1\" component=\"p\">\n                  {comment?.content}\n                </Typography>\n                <Typography\n                  variant=\"body2\"\n                  component=\"p\"\n                  color=\"textSecondary\"\n                >\n                  {iso8601ToDateTime(comment.createdAt?.toString() || \"100000000\")}\n                </Typography>\n              </Grid>\n            </Grid>\n          )\n        })\n      }\n      <form className={classes.formWrapper} noValidate autoComplete=\"off\" >\n        <TextField\n          required\n          multiline\n          value={content}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setContent(e.target.value)}\n          className={classes.textInputWrapper}\n        />\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={!content ? true : false}\n          onClick={handleSubmit}\n          className={classes.button}\n        >\n          <SendIcon />\n        </Button>\n      </form>\n    </>\n  )\n}\n\nexport default PostComment\n","/usr/src/app/src/lib/api/comments.ts",[],"/usr/src/app/src/config.js",[],["151","152"],{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","severity":1,"message":"158","line":53,"column":10,"nodeType":"159","messageId":"160","endLine":53,"endColumn":15},{"ruleId":"161","severity":1,"message":"162","line":139,"column":6,"nodeType":"163","endLine":139,"endColumn":8,"suggestions":"164"},{"ruleId":"157","severity":1,"message":"158","line":42,"column":10,"nodeType":"159","messageId":"160","endLine":42,"endColumn":15},{"ruleId":"157","severity":1,"message":"165","line":14,"column":8,"nodeType":"159","messageId":"160","endLine":14,"endColumn":20},{"ruleId":"157","severity":1,"message":"166","line":74,"column":10,"nodeType":"159","messageId":"160","endLine":74,"endColumn":17},{"ruleId":"157","severity":1,"message":"167","line":75,"column":10,"nodeType":"159","messageId":"160","endLine":75,"endColumn":15},{"ruleId":"157","severity":1,"message":"168","line":80,"column":10,"nodeType":"159","messageId":"160","endLine":80,"endColumn":26},{"ruleId":"157","severity":1,"message":"169","line":40,"column":7,"nodeType":"159","messageId":"160","endLine":40,"endColumn":19},{"ruleId":"157","severity":1,"message":"166","line":53,"column":10,"nodeType":"159","messageId":"160","endLine":53,"endColumn":17},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","replacedBy":"156"},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],"@typescript-eslint/no-unused-vars","'posts' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleGetUserPages'. Either include it or remove the dependency array.","ArrayExpression",["172"],"'AlertMessage' is defined but never used.","'loading' is assigned a value but never used.","'users' is assigned a value but never used.","'alertMessageOpen' is assigned a value but never used.","'borderStyles' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"173","fix":"174"},"Update the dependencies array to be: [handleGetUserPages]",{"range":"175","text":"176"},[3532,3534],"[handleGetUserPages]"]