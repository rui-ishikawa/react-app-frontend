[{"/usr/src/app/src/index.tsx":"1","/usr/src/app/src/App.tsx":"2","/usr/src/app/src/components/post/PostList.tsx":"3","/usr/src/app/src/lib/api/auth.ts":"4","/usr/src/app/src/lib/api/posts.ts":"5","/usr/src/app/src/components/post/PostForm.tsx":"6","/usr/src/app/src/components/post/PostItem.tsx":"7","/usr/src/app/src/components/pages/Root.tsx":"8","/usr/src/app/src/components/pages/ChatRoom.tsx":"9","/usr/src/app/src/components/pages/Users.tsx":"10","/usr/src/app/src/components/pages/SignIn.tsx":"11","/usr/src/app/src/components/pages/Home.tsx":"12","/usr/src/app/src/components/layouts/CommonLayout.tsx":"13","/usr/src/app/src/components/pages/NotFound.tsx":"14","/usr/src/app/src/components/pages/ChatRooms.tsx":"15","/usr/src/app/src/components/pages/SignUp.tsx":"16","/usr/src/app/src/lib/api/client.ts":"17","/usr/src/app/src/lib/api/chat_rooms.ts":"18","/usr/src/app/src/lib/api/messages.ts":"19","/usr/src/app/src/lib/api/users.ts":"20","/usr/src/app/src/lib/api/likes.ts":"21","/usr/src/app/src/components/layouts/Header.tsx":"22","/usr/src/app/src/components/Card/Card.tsx":"23","/usr/src/app/src/components/MainImage/MainImage.tsx":"24","/usr/src/app/src/components/utils/AlertMessage.tsx":"25","/usr/src/app/src/components/post/PostCard.tsx":"26","/usr/src/app/src/components/pages/UserPages.tsx":"27","/usr/src/app/src/components/pages/About.tsx":"28","/usr/src/app/src/components/post/PostModal.tsx":"29","/usr/src/app/src/components/post/UserModal.tsx":"30","/usr/src/app/src/components/post/PostComment.tsx":"31"},{"size":214,"mtime":1627514037809,"results":"32","hashOfConfig":"33"},{"size":3677,"mtime":1631276417785,"results":"34","hashOfConfig":"33"},{"size":1476,"mtime":1632428892879,"results":"35","hashOfConfig":"33"},{"size":1125,"mtime":1629760976795,"results":"36","hashOfConfig":"33"},{"size":798,"mtime":1629839219956,"results":"37","hashOfConfig":"33"},{"size":3837,"mtime":1632354739723,"results":"38","hashOfConfig":"33"},{"size":3184,"mtime":1632428892878,"results":"39","hashOfConfig":"33"},{"size":2761,"mtime":1631564701722,"results":"40","hashOfConfig":"33"},{"size":6578,"mtime":1629759396981,"results":"41","hashOfConfig":"33"},{"size":8255,"mtime":1632008201813,"results":"42","hashOfConfig":"33"},{"size":4626,"mtime":1628893833018,"results":"43","hashOfConfig":"33"},{"size":10085,"mtime":1631276417787,"results":"44","hashOfConfig":"33"},{"size":791,"mtime":1631276417786,"results":"45","hashOfConfig":"33"},{"size":198,"mtime":1627552797652,"results":"46","hashOfConfig":"33"},{"size":3944,"mtime":1631276417787,"results":"47","hashOfConfig":"33"},{"size":9007,"mtime":1630615221755,"results":"48","hashOfConfig":"33"},{"size":951,"mtime":1632429979360,"results":"49","hashOfConfig":"33"},{"size":683,"mtime":1627552797656,"results":"50","hashOfConfig":"33"},{"size":217,"mtime":1629020416540,"results":"51","hashOfConfig":"33"},{"size":978,"mtime":1630613699944,"results":"52","hashOfConfig":"33"},{"size":523,"mtime":1628893833023,"results":"53","hashOfConfig":"33"},{"size":3533,"mtime":1631537348083,"results":"54","hashOfConfig":"33"},{"size":1060,"mtime":1628551230170,"results":"55","hashOfConfig":"33"},{"size":388,"mtime":1631276417786,"results":"56","hashOfConfig":"33"},{"size":1155,"mtime":1627521381194,"results":"57","hashOfConfig":"33"},{"size":1324,"mtime":1631567381376,"results":"58","hashOfConfig":"33"},{"size":7889,"mtime":1630615123829,"results":"59","hashOfConfig":"33"},{"size":1738,"mtime":1631276417787,"results":"60","hashOfConfig":"33"},{"size":1987,"mtime":1631537348086,"results":"61","hashOfConfig":"33"},{"size":6892,"mtime":1632055880319,"results":"62","hashOfConfig":"33"},{"size":2943,"mtime":1632428892876,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"15i068l",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"66"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"66"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"66"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/usr/src/app/src/index.tsx",[],["130","131"],"/usr/src/app/src/App.tsx",[],"/usr/src/app/src/components/post/PostList.tsx",[],"/usr/src/app/src/lib/api/auth.ts",[],"/usr/src/app/src/lib/api/posts.ts",[],"/usr/src/app/src/components/post/PostForm.tsx",[],"/usr/src/app/src/components/post/PostItem.tsx",[],"/usr/src/app/src/components/pages/Root.tsx",[],"/usr/src/app/src/components/pages/ChatRoom.tsx",[],"/usr/src/app/src/components/pages/Users.tsx",[],"/usr/src/app/src/components/pages/SignIn.tsx",[],"/usr/src/app/src/components/pages/Home.tsx",[],"/usr/src/app/src/components/layouts/CommonLayout.tsx",[],"/usr/src/app/src/components/pages/NotFound.tsx",[],"/usr/src/app/src/components/pages/ChatRooms.tsx",[],"/usr/src/app/src/components/pages/SignUp.tsx",[],"/usr/src/app/src/lib/api/client.ts",[],"/usr/src/app/src/lib/api/chat_rooms.ts",[],"/usr/src/app/src/lib/api/messages.ts",[],"/usr/src/app/src/lib/api/users.ts",[],"/usr/src/app/src/lib/api/likes.ts",[],"/usr/src/app/src/components/layouts/Header.tsx",[],"/usr/src/app/src/components/Card/Card.tsx",[],"/usr/src/app/src/components/MainImage/MainImage.tsx",[],"/usr/src/app/src/components/utils/AlertMessage.tsx",[],"/usr/src/app/src/components/post/PostCard.tsx",[],"/usr/src/app/src/components/pages/UserPages.tsx",["132"],"import React, { useState, useEffect, useContext } from \"react\"\nimport { RouteComponentProps } from \"react-router-dom\"\nimport { Link } from \"react-router-dom\"\nimport { motion } from \"framer-motion\";\n\nimport { makeStyles, Theme } from \"@material-ui/core/styles\"\nimport { Grid, Typography } from \"@material-ui/core\"\n\nimport Dialog from \"@material-ui/core/Dialog\"\nimport DialogContent from \"@material-ui/core/DialogContent\"\n\nimport Avatar from \"@material-ui/core/Avatar\"\nimport Button from \"@material-ui/core/Button\"\nimport Divider from \"@material-ui/core/Divider\"\nimport FavoriteIcon from \"@material-ui/icons/Favorite\"\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\"\nimport { LikeFormData } from \"interfaces/index\"\nimport AlertMessage from \"components/utils/AlertMessage\"\n\nimport { getUserPages } from \"lib/api/users\"\nimport { getLikes, createLike } from \"lib/api/likes\"\nimport { User, LikeData } from \"interfaces/index\"\n\nimport { AuthContext } from \"App\"\n\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  avatar: {\n    width: theme.spacing(10),\n    height: theme.spacing(10)\n  }\n}))\n\ntype UserPagesProps = RouteComponentProps<{ id: string }>\n\n// 個別のチャットルームページ\nconst UserPages: React.FC<UserPagesProps> = (props) => {\n  const { currentUser } = useContext(AuthContext)\n  const classes = useStyles()\n\n  const id = parseInt(props.match.params.id) // URLからidを取得\n  console.log(id)\n\n  const initialUserState: User = {\n    id: 0,\n    uid: \"\",\n    provider: \"\",\n    email: \"\",\n    name: \"\",\n    image: {\n      url: \"\"\n    },\n    profile: \"\",\n    allowPasswordChange: true\n  }\n\n  const [loading, setLoading] = useState<boolean>(true)\n  const [users, setUserPages] = useState<User[]>([])\n  const [user, setUser] = useState<User>(initialUserState)\n  const [userDetailOpen, setUserDetailOpen] = useState<boolean>(false)\n  const [likedUsers, setLikedUsers] = useState<User[]>([])\n  const [likes, setLikes] = useState<LikeData[]>([])\n  const [alertMessageOpen, setAlertMessageOpen] = useState<boolean>(false)\n\n  // フォームデータを作成\n  const createFormData = (): LikeFormData => {\n    const formData = new FormData()\n\n    formData.append(\"fromUserId\", String(currentUser?.id))\n    formData.append(\"toUserId\", String(user.id))\n\n    return formData\n  }\n\n  // いいね作成\n  const handleCreateLike = async (user: User) => {\n\n    const data = createFormData()\n\n    try {\n      const res = await createLike(data)\n      console.log(res)\n\n      if (res?.status === 200) {\n        setLikes([res.data.like, ...likes])\n        setLikedUsers([user, ...likedUsers])\n\n        console.log(res?.data.like)\n      } else {\n        console.log(\"Failed\")\n      }\n\n      if (res?.data.isMatched === true) {\n        setAlertMessageOpen(true)\n        setUserDetailOpen(false)\n      }\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  // ユーザーを取得\n  const handleGetUserPages = async () => {\n    try {\n      const res = await getUserPages(id)\n      console.log(res)\n\n      if (res?.status === 200) {\n        setUserPages(res?.data.user) 　// ここを編集する\n      } else {\n        console.log(\"No users\")\n      }\n    } catch (err) {\n      console.log(err)\n    }\n\n    setLoading(false)\n  }\n\n  // いいね一覧を取得\n  const handleGetLikes = async () => {\n    try {\n      const res = await getLikes()\n      console.log(res)\n\n      if (res?.status === 200) {\n        setLikedUsers(res?.data.activeLikes)\n      } else {\n        console.log(\"No likes\")\n      }\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  useEffect(() => {\n    handleGetUserPages()\n    handleGetLikes()\n  }, [])\n\n  // すでにいいねを押されているユーザーかどうかの判定\n  const isLikedUser = (userId: number | undefined): boolean => {\n    return likedUsers?.some((likedUser: User) => likedUser.id === userId)\n  }\n\n  return (\n    <>\n      {\n        !loading ? (\n          users?.length > 0 ? (\n            <motion.div\n              animate={{ x: 0 }}\n              initial={{ x: 800 }}\n              exit={{ x: -800 }}\n              transition={{ duration: 0.4 }}>\n              <Grid container justifyContent=\"center\">\n                {\n                  users?.find((user: User, index: number) => {\n                    return (\n                      <div key={index} onClick={() => {\n                        setUser(user)\n                        setUserDetailOpen(true)\n                      }}>\n                        <Grid item style={{ margin: \"0.5rem\", cursor: \"pointer\" }}>\n                          <Avatar\n                            alt=\"avatar\"\n                            src={user?.image.url}\n                            className={classes.avatar}\n                          />\n                          <Typography\n                            variant=\"body2\"\n                            component=\"p\"\n                            gutterBottom\n                            style={{ marginTop: \"0.5rem\", textAlign: \"center\" }}\n                          >\n                            {user.name}\n                          </Typography>\n                        </Grid>\n                      </div>\n                    )\n                  })\n                }\n              </Grid>\n            </motion.div>\n          ) : (\n            <Typography\n              component=\"p\"\n              variant=\"body2\"\n              color=\"textSecondary\"\n            >\n              まだ1人もユーザーがいません。\n            </Typography>\n          )\n        ) : (\n          <></>\n        )\n      }\n      <Dialog\n        open={userDetailOpen}\n        keepMounted\n        onClose={() => setUserDetailOpen(false)}\n      >\n        <DialogContent>\n          <Grid container justifyContent=\"center\">\n            <Grid item>\n              <Avatar\n                alt=\"avatar\"\n                src={user?.image.url}\n                className={classes.avatar}\n              />\n            </Grid>\n          </Grid>\n          <Grid container justifyContent=\"center\">\n            <Grid item style={{ marginTop: \"1rem\" }}>\n              <Typography variant=\"body1\" component=\"p\" gutterBottom style={{ textAlign: \"center\" }}>\n                {user.name}\n              </Typography>\n              <Divider />\n              <Typography\n                variant=\"body2\"\n                component=\"p\"\n                gutterBottom\n                style={{ marginTop: \"0.5rem\", fontWeight: \"bold\" }}\n              >\n                自己紹介\n            </Typography>\n              <Typography variant=\"body2\" component=\"p\" color=\"textSecondary\" style={{ marginTop: \"0.5rem\" }}>\n                {user.profile ? user.profile : \"よろしくお願いします。\"}\n              </Typography>\n            </Grid>\n          </Grid>\n          <Grid container justifyContent=\"center\">\n            <Button\n              variant=\"outlined\"\n              onClick={() => isLikedUser(user.id) ? void (0) : handleCreateLike(user)}\n              color=\"secondary\"\n              startIcon={isLikedUser(user.id) ? <FavoriteIcon /> : <FavoriteBorderIcon />}\n              disabled={isLikedUser(user.id) ? true : false}\n              style={{ marginTop: \"1rem\", marginBottom: \"1rem\" }}\n            >\n              {isLikedUser(user.id) ? \"いいね済み\" : \"いいね\"}\n            </Button>\n            <Grid container justifyContent=\"center\">\n              <Button\n                component={Link}\n                to=\"/\"\n                variant=\"outlined\"\n                color=\"secondary\"\n              > 学習をくわしく見る\n          </Button>\n            </Grid>\n          </Grid>\n        </DialogContent>\n      </Dialog>\n      <AlertMessage\n        open={alertMessageOpen}\n        setOpen={setAlertMessageOpen}\n        severity=\"success\"\n        message=\"マッチングが成立しました!\"\n      />\n    </>\n  )\n}\n\nexport default UserPages\n","/usr/src/app/src/components/pages/About.tsx",[],"/usr/src/app/src/components/post/PostModal.tsx",["133"],"import React, { useEffect, useState } from \"react\"\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport PostForm from './PostForm';\nimport { getPosts } from \"../../lib/api/posts\"\nimport { Post } from \"../../interfaces/index\"\nimport Button from \"@material-ui/core/Button\"\n\n\nfunction getModalStyle() {\n  const top = 50\n  const left = 50\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    paper: {\n      position: 'absolute',\n      width: 480,\n      backgroundColor: theme.palette.background.paper,\n      border: '2px solid #000',\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(6, 8, 7),\n    },\n    button: {\n      color: \"#f87ede\",\n    },\n  }),\n);\n\nexport default function PostModal() {\n  const classes = useStyles();\n  // getModalStyle is not a pure function, we roll the style only on the first render\n  const [modalStyle] = React.useState(getModalStyle);\n  const [open, setOpen] = React.useState(false);\n  const [posts, setPosts] = useState<Post[]>([])\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n\n  const handleGetPosts = async () => {\n    const { data } = await getPosts()\n\n    setPosts(data.posts)\n  }\n\n  useEffect(() => {\n    handleGetPosts()\n  }, [])\n\n\n  const body = (\n    <div style={modalStyle} className={classes.paper}>\n      <PostForm\n        handleGetPosts={handleGetPosts}\n      />\n    </div>\n  );\n\n  return (\n    <div>\n      <Button\n        onClick={handleOpen}\n        variant=\"outlined\"\n        className={classes.button}\n      >\n        作成する\n      </Button>\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        {body}\n      </Modal>\n    </div>\n  );\n}\n","/usr/src/app/src/components/post/UserModal.tsx",["134","135","136","137"],"import React, { Fragment, useState, useEffect, useContext } from \"react\"\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\n\nimport { Grid, Typography } from \"@material-ui/core\"\nimport Dialog from \"@material-ui/core/Dialog\"\nimport DialogContent from \"@material-ui/core/DialogContent\"\n\nimport Avatar from \"@material-ui/core/Avatar\"\nimport Button from \"@material-ui/core/Button\"\nimport Divider from \"@material-ui/core/Divider\"\nimport FavoriteIcon from \"@material-ui/icons/Favorite\"\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\"\nimport { LikeFormData } from \"interfaces/index\"\nimport AlertMessage from \"components/utils/AlertMessage\"\n\nimport { getUsers } from \"lib/api/users\"\nimport { getLikes, createLike } from \"lib/api/likes\"\nimport { User, LikeData } from \"interfaces/index\"\nimport { AuthContext } from \"App\"\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    paper: {\n      position: 'absolute',\n      width: 480,\n      backgroundColor: theme.palette.background.paper,\n      border: '2px solid #000',\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(6, 8, 7),\n    },\n    button: {\n      color: \"#f87ede\",\n    },\n    avatar: {\n      width: theme.spacing(10),\n      height: theme.spacing(10)\n    },\n    card: {\n      width: 480,\n      marginTop: \"2rem\",\n      transition: \"all 0.3s\",\n      \"&:hover\": {\n        boxShadow:\n          \"1px 0px 20px -1px rgba(0,0,0,0.2), 0px 0px 20px 5px rgba(0,0,0,0.14), 0px 1px 10px 0px rgba(0,0,0,0.12)\",\n        transform: \"translateY(-3px)\"\n      }\n    },\n  }),\n);\n\nconst UserModal: React.FC = () => {\n  const classes = useStyles();\n  const { currentUser } = useContext(AuthContext)\n\n  const initialUserState: User = {\n    id: 0,\n    uid: \"\",\n    provider: \"\",\n    email: \"\",\n    name: \"\",\n    image: {\n      url: \"\"\n    },\n    profile: \"\",\n    allowPasswordChange: true\n  }\n\n  const [loading, setLoading] = useState<boolean>(true)\n  const [users, setUsers] = useState<User[]>([])\n  const [user, setUser] = useState<User>(initialUserState)\n  const [userDetailOpen, setUserDetailOpen] = useState<boolean>(false)\n  const [likedUsers, setLikedUsers] = useState<User[]>([])\n  const [likes, setLikes] = useState<LikeData[]>([])\n  const [alertMessageOpen, setAlertMessageOpen] = useState<boolean>(false)\n\n  // フォームデータを作成\n  const createFormData = (): LikeFormData => {\n    const formData = new FormData()\n\n    formData.append(\"fromUserId\", String(currentUser?.id))\n    formData.append(\"toUserId\", String(user.id))\n\n    return formData\n  }\n\n  // いいね作成\n  const handleCreateLike = async (user: User) => {\n\n    const data = createFormData()\n\n    try {\n      const res = await createLike(data)\n      console.log(res)\n\n      if (res?.status === 200) {\n        setLikes([res.data.like, ...likes])\n        setLikedUsers([user, ...likedUsers])\n\n        console.log(res?.data.like)\n      } else {\n        console.log(\"Failed\")\n      }\n\n      if (res?.data.isMatched === true) {\n        setAlertMessageOpen(true)\n        setUserDetailOpen(false)\n      }\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  // ユーザー一覧を取得\n  const handleGetUsers = async () => {\n    try {\n      const res = await getUsers()\n      console.log(res)\n\n      if (res?.status === 200) {\n        setUsers(res?.data.users)\n      } else {\n        console.log(\"No users\")\n      }\n    } catch (err) {\n      console.log(err)\n    }\n\n    setLoading(false)\n  }\n\n  // いいね一覧を取得\n  const handleGetLikes = async () => {\n    try {\n      const res = await getLikes()\n      console.log(res)\n\n      if (res?.status === 200) {\n        setLikedUsers(res?.data.activeLikes)\n      } else {\n        console.log(\"No likes\")\n      }\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  useEffect(() => {\n    handleGetUsers()\n    handleGetLikes()\n  }, [])\n\n  // すでにいいねを押されているユーザーかどうかの判定\n  const isLikedUser = (userId: number | undefined): boolean => {\n    return likedUsers?.some((likedUser: User) => likedUser.id === userId)\n  }\n\n\n  const handleOpen = () => {\n    setUser(user)\n    setUserDetailOpen(true);\n  };\n\n  const handleClose = () => {\n    setUserDetailOpen(false);\n  };\n\n\n\n\n\n  return (\n    <>\n      {\n        users?.map((user: User, index: number) => {\n          return (\n            user.id === user.id ? (　　//ここは投稿者のIDと同じユーザーにしたい　\n              <div key={index} onClick={() => {\n                setUser(user)\n                setUserDetailOpen(true)\n              }}>\n                <Button\n                  onClick={handleOpen}\n                  variant=\"text\"\n                  className={classes.button}\n                >\n                  ユーザーの情報を見る\n                </Button>\n              </div>\n            ) : (\n              <></>\n            )\n          )\n        })\n      }\n\n      <div>\n        <Dialog\n          open={userDetailOpen}\n          onClose={handleClose}\n          keepMounted\n        >\n          <DialogContent>\n            <Grid container justifyContent=\"center\">\n              <Grid item>\n                <Avatar\n                  alt=\"avatar\"\n                  src={user?.image.url}\n                  className={classes.avatar}\n                />\n              </Grid>\n            </Grid>\n            <Grid container justifyContent=\"center\">\n              <Grid item style={{ marginTop: \"1rem\" }}>\n                <Typography variant=\"body1\" component=\"p\" gutterBottom style={{ textAlign: \"center\" }}>\n                  {user.name}\n                </Typography>\n                <Divider />\n                <Typography\n                  variant=\"body2\"\n                  component=\"p\"\n                  gutterBottom\n                  style={{ marginTop: \"0.5rem\", fontWeight: \"bold\" }}\n                >\n                  自己紹介\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\" color=\"textSecondary\" style={{ marginTop: \"0.5rem\" }}>\n                  {user.profile ? user.profile : \"よろしくお願いします。\"}\n                </Typography>\n              </Grid>\n            </Grid>\n            <Grid container justifyContent=\"center\">\n              <Button\n                variant=\"outlined\"\n                onClick={() => isLikedUser(user.id) ? void (0) : handleCreateLike(user)}\n                color=\"secondary\"\n                startIcon={isLikedUser(user.id) ? <FavoriteIcon /> : <FavoriteBorderIcon />}\n                disabled={isLikedUser(user.id) ? true : false}\n                style={{ marginTop: \"1rem\", marginBottom: \"1rem\" }}\n              >\n                {isLikedUser(user.id) ? \"いいね済み\" : \"いいね\"}\n              </Button>\n            </Grid>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n\n\n    </>\n  )\n\n\n}\n\nexport default UserModal\n","/usr/src/app/src/components/post/PostComment.tsx",["138","139"],{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","severity":1,"message":"145","line":139,"column":6,"nodeType":"146","endLine":139,"endColumn":8,"suggestions":"147"},{"ruleId":"148","severity":1,"message":"149","line":42,"column":10,"nodeType":"150","messageId":"151","endLine":42,"endColumn":15},{"ruleId":"148","severity":1,"message":"152","line":14,"column":8,"nodeType":"150","messageId":"151","endLine":14,"endColumn":20},{"ruleId":"148","severity":1,"message":"153","line":69,"column":10,"nodeType":"150","messageId":"151","endLine":69,"endColumn":17},{"ruleId":"148","severity":1,"message":"154","line":75,"column":10,"nodeType":"150","messageId":"151","endLine":75,"endColumn":26},{"ruleId":"155","severity":1,"message":"156","line":177,"column":13,"nodeType":"157","messageId":"158","endLine":177,"endColumn":32},{"ruleId":"148","severity":1,"message":"159","line":38,"column":7,"nodeType":"150","messageId":"151","endLine":38,"endColumn":12},{"ruleId":"148","severity":1,"message":"160","line":42,"column":7,"nodeType":"150","messageId":"151","endLine":42,"endColumn":19},"no-native-reassign",["161"],"no-negated-in-lhs",["162"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleGetUserPages'. Either include it or remove the dependency array.","ArrayExpression",["163"],"@typescript-eslint/no-unused-vars","'posts' is assigned a value but never used.","Identifier","unusedVar","'AlertMessage' is defined but never used.","'loading' is assigned a value but never used.","'alertMessageOpen' is assigned a value but never used.","no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","comparingToSelf","'Input' is assigned a value but never used.","'borderStyles' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"164","fix":"165"},"Update the dependencies array to be: [handleGetUserPages]",{"range":"166","text":"167"},[3532,3534],"[handleGetUserPages]"]