[{"/usr/src/app/src/index.tsx":"1","/usr/src/app/src/App.tsx":"2","/usr/src/app/src/components/post/PostList.tsx":"3","/usr/src/app/src/lib/api/auth.ts":"4","/usr/src/app/src/lib/api/posts.ts":"5","/usr/src/app/src/components/post/PostForm.tsx":"6","/usr/src/app/src/components/post/PostItem.tsx":"7","/usr/src/app/src/components/pages/Root.tsx":"8","/usr/src/app/src/components/pages/ChatRoom.tsx":"9","/usr/src/app/src/components/pages/Users.tsx":"10","/usr/src/app/src/components/pages/SignIn.tsx":"11","/usr/src/app/src/components/pages/Home.tsx":"12","/usr/src/app/src/components/layouts/CommonLayout.tsx":"13","/usr/src/app/src/components/pages/NotFound.tsx":"14","/usr/src/app/src/components/pages/ChatRooms.tsx":"15","/usr/src/app/src/components/pages/SignUp.tsx":"16","/usr/src/app/src/lib/api/client.ts":"17","/usr/src/app/src/lib/api/chat_rooms.ts":"18","/usr/src/app/src/lib/api/messages.ts":"19","/usr/src/app/src/lib/api/users.ts":"20","/usr/src/app/src/lib/api/likes.ts":"21","/usr/src/app/src/components/layouts/Header.tsx":"22","/usr/src/app/src/components/Card/Card.tsx":"23","/usr/src/app/src/components/MainImage/MainImage.tsx":"24","/usr/src/app/src/components/utils/AlertMessage.tsx":"25","/usr/src/app/src/components/post/PostCard.tsx":"26","/usr/src/app/src/components/pages/UserPages.tsx":"27","/usr/src/app/src/components/pages/About.tsx":"28","/usr/src/app/src/components/post/PostModal.tsx":"29","/usr/src/app/src/components/post/UserModal.tsx":"30","/usr/src/app/src/components/post/PostComment.tsx":"31","/usr/src/app/src/lib/api/comments.ts":"32","/usr/src/app/src/config.js":"33"},{"size":214,"mtime":1627514037809,"results":"34","hashOfConfig":"35"},{"size":3812,"mtime":1632613192508,"results":"36","hashOfConfig":"35"},{"size":1476,"mtime":1633855955866,"results":"37","hashOfConfig":"35"},{"size":1125,"mtime":1629760976795,"results":"38","hashOfConfig":"35"},{"size":803,"mtime":1633866806598,"results":"39","hashOfConfig":"35"},{"size":3837,"mtime":1632354739723,"results":"40","hashOfConfig":"35"},{"size":3911,"mtime":1633868904396,"results":"41","hashOfConfig":"35"},{"size":2761,"mtime":1631564701722,"results":"42","hashOfConfig":"35"},{"size":6578,"mtime":1633129712374,"results":"43","hashOfConfig":"35"},{"size":8255,"mtime":1632008201813,"results":"44","hashOfConfig":"35"},{"size":4626,"mtime":1628893833018,"results":"45","hashOfConfig":"35"},{"size":10085,"mtime":1631276417787,"results":"46","hashOfConfig":"35"},{"size":791,"mtime":1631276417786,"results":"47","hashOfConfig":"35"},{"size":198,"mtime":1627552797652,"results":"48","hashOfConfig":"35"},{"size":3944,"mtime":1631276417787,"results":"49","hashOfConfig":"35"},{"size":9007,"mtime":1630615221755,"results":"50","hashOfConfig":"35"},{"size":886,"mtime":1632613895599,"results":"51","hashOfConfig":"35"},{"size":683,"mtime":1627552797656,"results":"52","hashOfConfig":"35"},{"size":217,"mtime":1632686921899,"results":"53","hashOfConfig":"35"},{"size":978,"mtime":1630613699944,"results":"54","hashOfConfig":"35"},{"size":523,"mtime":1628893833023,"results":"55","hashOfConfig":"35"},{"size":3541,"mtime":1633179857476,"results":"56","hashOfConfig":"35"},{"size":1060,"mtime":1628551230170,"results":"57","hashOfConfig":"35"},{"size":388,"mtime":1631276417786,"results":"58","hashOfConfig":"35"},{"size":1155,"mtime":1627521381194,"results":"59","hashOfConfig":"35"},{"size":1324,"mtime":1631567381376,"results":"60","hashOfConfig":"35"},{"size":7889,"mtime":1630615123829,"results":"61","hashOfConfig":"35"},{"size":1738,"mtime":1631276417787,"results":"62","hashOfConfig":"35"},{"size":1910,"mtime":1633867256227,"results":"63","hashOfConfig":"35"},{"size":6766,"mtime":1633871100136,"results":"64","hashOfConfig":"35"},{"size":4105,"mtime":1633640743302,"results":"65","hashOfConfig":"35"},{"size":470,"mtime":1633524447603,"results":"66","hashOfConfig":"35"},{"size":75,"mtime":1632950377100,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"15i068l",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"70"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},"/usr/src/app/src/index.tsx",[],["138","139"],"/usr/src/app/src/App.tsx",[],"/usr/src/app/src/components/post/PostList.tsx",[],"/usr/src/app/src/lib/api/auth.ts",[],"/usr/src/app/src/lib/api/posts.ts",[],"/usr/src/app/src/components/post/PostForm.tsx",[],"/usr/src/app/src/components/post/PostItem.tsx",["140","141","142"],"/usr/src/app/src/components/pages/Root.tsx",[],"/usr/src/app/src/components/pages/ChatRoom.tsx",[],"/usr/src/app/src/components/pages/Users.tsx",[],"/usr/src/app/src/components/pages/SignIn.tsx",[],"/usr/src/app/src/components/pages/Home.tsx",[],"/usr/src/app/src/components/layouts/CommonLayout.tsx",[],"/usr/src/app/src/components/pages/NotFound.tsx",[],"/usr/src/app/src/components/pages/ChatRooms.tsx",[],"/usr/src/app/src/components/pages/SignUp.tsx",[],"/usr/src/app/src/lib/api/client.ts",[],"/usr/src/app/src/lib/api/chat_rooms.ts",[],"/usr/src/app/src/lib/api/messages.ts",[],"/usr/src/app/src/lib/api/users.ts",[],"/usr/src/app/src/lib/api/likes.ts",[],"/usr/src/app/src/components/layouts/Header.tsx",[],"/usr/src/app/src/components/Card/Card.tsx",[],"/usr/src/app/src/components/MainImage/MainImage.tsx",[],"/usr/src/app/src/components/utils/AlertMessage.tsx",[],"/usr/src/app/src/components/post/PostCard.tsx",[],"/usr/src/app/src/components/pages/UserPages.tsx",["143"],"import React, { useState, useEffect, useContext } from \"react\"\nimport { RouteComponentProps } from \"react-router-dom\"\nimport { Link } from \"react-router-dom\"\nimport { motion } from \"framer-motion\";\n\nimport { makeStyles, Theme } from \"@material-ui/core/styles\"\nimport { Grid, Typography } from \"@material-ui/core\"\n\nimport Dialog from \"@material-ui/core/Dialog\"\nimport DialogContent from \"@material-ui/core/DialogContent\"\n\nimport Avatar from \"@material-ui/core/Avatar\"\nimport Button from \"@material-ui/core/Button\"\nimport Divider from \"@material-ui/core/Divider\"\nimport FavoriteIcon from \"@material-ui/icons/Favorite\"\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\"\nimport { LikeFormData } from \"interfaces/index\"\nimport AlertMessage from \"components/utils/AlertMessage\"\n\nimport { getUserPages } from \"lib/api/users\"\nimport { getLikes, createLike } from \"lib/api/likes\"\nimport { User, LikeData } from \"interfaces/index\"\n\nimport { AuthContext } from \"App\"\n\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  avatar: {\n    width: theme.spacing(10),\n    height: theme.spacing(10)\n  }\n}))\n\ntype UserPagesProps = RouteComponentProps<{ id: string }>\n\n// 個別のチャットルームページ\nconst UserPages: React.FC<UserPagesProps> = (props) => {\n  const { currentUser } = useContext(AuthContext)\n  const classes = useStyles()\n\n  const id = parseInt(props.match.params.id) // URLからidを取得\n  console.log(id)\n\n  const initialUserState: User = {\n    id: 0,\n    uid: \"\",\n    provider: \"\",\n    email: \"\",\n    name: \"\",\n    image: {\n      url: \"\"\n    },\n    profile: \"\",\n    allowPasswordChange: true\n  }\n\n  const [loading, setLoading] = useState<boolean>(true)\n  const [users, setUserPages] = useState<User[]>([])\n  const [user, setUser] = useState<User>(initialUserState)\n  const [userDetailOpen, setUserDetailOpen] = useState<boolean>(false)\n  const [likedUsers, setLikedUsers] = useState<User[]>([])\n  const [likes, setLikes] = useState<LikeData[]>([])\n  const [alertMessageOpen, setAlertMessageOpen] = useState<boolean>(false)\n\n  // フォームデータを作成\n  const createFormData = (): LikeFormData => {\n    const formData = new FormData()\n\n    formData.append(\"fromUserId\", String(currentUser?.id))\n    formData.append(\"toUserId\", String(user.id))\n\n    return formData\n  }\n\n  // いいね作成\n  const handleCreateLike = async (user: User) => {\n\n    const data = createFormData()\n\n    try {\n      const res = await createLike(data)\n      console.log(res)\n\n      if (res?.status === 200) {\n        setLikes([res.data.like, ...likes])\n        setLikedUsers([user, ...likedUsers])\n\n        console.log(res?.data.like)\n      } else {\n        console.log(\"Failed\")\n      }\n\n      if (res?.data.isMatched === true) {\n        setAlertMessageOpen(true)\n        setUserDetailOpen(false)\n      }\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  // ユーザーを取得\n  const handleGetUserPages = async () => {\n    try {\n      const res = await getUserPages(id)\n      console.log(res)\n\n      if (res?.status === 200) {\n        setUserPages(res?.data.user) 　// ここを編集する\n      } else {\n        console.log(\"No users\")\n      }\n    } catch (err) {\n      console.log(err)\n    }\n\n    setLoading(false)\n  }\n\n  // いいね一覧を取得\n  const handleGetLikes = async () => {\n    try {\n      const res = await getLikes()\n      console.log(res)\n\n      if (res?.status === 200) {\n        setLikedUsers(res?.data.activeLikes)\n      } else {\n        console.log(\"No likes\")\n      }\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  useEffect(() => {\n    handleGetUserPages()\n    handleGetLikes()\n  }, [])\n\n  // すでにいいねを押されているユーザーかどうかの判定\n  const isLikedUser = (userId: number | undefined): boolean => {\n    return likedUsers?.some((likedUser: User) => likedUser.id === userId)\n  }\n\n  return (\n    <>\n      {\n        !loading ? (\n          users?.length > 0 ? (\n            <motion.div\n              animate={{ x: 0 }}\n              initial={{ x: 800 }}\n              exit={{ x: -800 }}\n              transition={{ duration: 0.4 }}>\n              <Grid container justifyContent=\"center\">\n                {\n                  users?.find((user: User, index: number) => {\n                    return (\n                      <div key={index} onClick={() => {\n                        setUser(user)\n                        setUserDetailOpen(true)\n                      }}>\n                        <Grid item style={{ margin: \"0.5rem\", cursor: \"pointer\" }}>\n                          <Avatar\n                            alt=\"avatar\"\n                            src={user?.image.url}\n                            className={classes.avatar}\n                          />\n                          <Typography\n                            variant=\"body2\"\n                            component=\"p\"\n                            gutterBottom\n                            style={{ marginTop: \"0.5rem\", textAlign: \"center\" }}\n                          >\n                            {user.name}\n                          </Typography>\n                        </Grid>\n                      </div>\n                    )\n                  })\n                }\n              </Grid>\n            </motion.div>\n          ) : (\n            <Typography\n              component=\"p\"\n              variant=\"body2\"\n              color=\"textSecondary\"\n            >\n              まだ1人もユーザーがいません。\n            </Typography>\n          )\n        ) : (\n          <></>\n        )\n      }\n      <Dialog\n        open={userDetailOpen}\n        keepMounted\n        onClose={() => setUserDetailOpen(false)}\n      >\n        <DialogContent>\n          <Grid container justifyContent=\"center\">\n            <Grid item>\n              <Avatar\n                alt=\"avatar\"\n                src={user?.image.url}\n                className={classes.avatar}\n              />\n            </Grid>\n          </Grid>\n          <Grid container justifyContent=\"center\">\n            <Grid item style={{ marginTop: \"1rem\" }}>\n              <Typography variant=\"body1\" component=\"p\" gutterBottom style={{ textAlign: \"center\" }}>\n                {user.name}\n              </Typography>\n              <Divider />\n              <Typography\n                variant=\"body2\"\n                component=\"p\"\n                gutterBottom\n                style={{ marginTop: \"0.5rem\", fontWeight: \"bold\" }}\n              >\n                自己紹介\n            </Typography>\n              <Typography variant=\"body2\" component=\"p\" color=\"textSecondary\" style={{ marginTop: \"0.5rem\" }}>\n                {user.profile ? user.profile : \"よろしくお願いします。\"}\n              </Typography>\n            </Grid>\n          </Grid>\n          <Grid container justifyContent=\"center\">\n            <Button\n              variant=\"outlined\"\n              onClick={() => isLikedUser(user.id) ? void (0) : handleCreateLike(user)}\n              color=\"secondary\"\n              startIcon={isLikedUser(user.id) ? <FavoriteIcon /> : <FavoriteBorderIcon />}\n              disabled={isLikedUser(user.id) ? true : false}\n              style={{ marginTop: \"1rem\", marginBottom: \"1rem\" }}\n            >\n              {isLikedUser(user.id) ? \"いいね済み\" : \"いいね\"}\n            </Button>\n            <Grid container justifyContent=\"center\">\n              <Button\n                component={Link}\n                to=\"/\"\n                variant=\"outlined\"\n                color=\"secondary\"\n              > 学習をくわしく見る\n          </Button>\n            </Grid>\n          </Grid>\n        </DialogContent>\n      </Dialog>\n      <AlertMessage\n        open={alertMessageOpen}\n        setOpen={setAlertMessageOpen}\n        severity=\"success\"\n        message=\"マッチングが成立しました!\"\n      />\n    </>\n  )\n}\n\nexport default UserPages\n","/usr/src/app/src/components/pages/About.tsx",[],"/usr/src/app/src/components/post/PostModal.tsx",["144"],"/usr/src/app/src/components/post/UserModal.tsx",["145","146"],"/usr/src/app/src/components/post/PostComment.tsx",["147","148"],"import React, { useState, useEffect } from \"react\"\n\nimport { makeStyles, Theme } from \"@material-ui/core/styles\"\nimport TextField from \"@material-ui/core/TextField\"\nimport Button from \"@material-ui/core/Button\"\nimport SendIcon from \"@material-ui/icons/Send\"\nimport { Grid, Typography } from \"@material-ui/core\"\n\nimport { createComment, getComments } from \"../../lib/api/comments\"\nimport { CommentFormData } from \"interfaces/index\"\nimport { CommentData } from \"interfaces/index\"\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  form: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    width: 480\n  },\n  inputFileBtn: {\n    marginTop: \"10px\"\n  },\n  submitBtn: {\n    marginTop: \"10px\",\n    marginLeft: \"auto\"\n  },\n  formWrapper: {\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    width: \"100%\"\n  },\n  textInputWrapper: {\n    width: \"80%\"\n  },\n  button: {\n    marginLeft: theme.spacing(1)\n  }\n}))\n\nconst borderStyles = {\n  bgcolor: \"background.paper\",\n  border: 1,\n}\n\ntype CommentProps = { content?: string, key: string }\n\nconst PostComment: React.FC<CommentProps> = (props) => {\n  const classes = useStyles()\n\n  const [content, setContent] = useState<string>(\"\")\n  const [key, setKey] = useState<string>(\"\")\n  const [comments, setComments] = useState<CommentData[]>([])\n  const [loading, setLoading] = useState<boolean>(true)\n\n  const createFormData = (): CommentFormData => {\n    const formData = new FormData()\n\n    formData.append(\"content\", content)\n    formData.append(\"post_id\", key)\n\n    return formData\n  }\n\n  useEffect(() => {\n    async function handleGetComments() {\n      try {\n        const res = await getComments()\n        console.log(res)\n\n        if (res?.status === 200) {\n          // setOtherUser(res?.data.otherUser)\n          setComments(res?.data.comments)\n        } else {\n          console.log(\"No comments\")\n        }\n      } catch (err) {\n        console.log(err)\n      }\n\n      setLoading(false)\n    }\n    handleGetComments()\n  }, [])\n\n  const handleSubmit = async (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault()\n\n    const data = createFormData()\n\n    try {\n      const res = await createComment(data)\n      if (res.status === 200) {\n        setComments([...comments, res.data.comment])\n        setContent(\"\")\n        setKey(\"\")\n        console.log(res)\n      }\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  // Railsから渡ってくるtimestamp（ISO8601）をdatetimeに変換\n  const iso8601ToDateTime = (iso8601: string) => {\n    const date = new Date(Date.parse(iso8601))\n    const year = date.getFullYear()\n    const month = date.getMonth() + 1\n    const day = date.getDate()\n    const hour = date.getHours()\n    const minute = date.getMinutes()\n\n    return year + \"年\" + month + \"月\" + day + \"日\" + hour + \"時\" + minute + \"分\"\n  }\n\n\n  return (\n    <>\n      {\n        comments.map((comment: CommentData, index: number) => {\n          return (\n            <Grid key={index} container justifyContent=\"flex-start\" >\n              <Grid item>\n\n                <Typography variant=\"body1\" component=\"p\">\n                  {comment?.content}\n                </Typography>\n                <Typography\n                  variant=\"body2\"\n                  component=\"p\"\n                  color=\"textSecondary\"\n                >\n                  {iso8601ToDateTime(comment.createdAt?.toString() || \"100000000\")}\n                </Typography>\n              </Grid>\n            </Grid>\n          )\n        })\n      }\n      <form className={classes.formWrapper} noValidate autoComplete=\"off\" >\n        <TextField\n          required\n          multiline\n          value={content}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setContent(e.target.value)}\n          className={classes.textInputWrapper}\n        />\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={!content ? true : false}\n          onClick={handleSubmit}\n          className={classes.button}\n        >\n          <SendIcon />\n        </Button>\n      </form>\n    </>\n  )\n}\n\nexport default PostComment\n","/usr/src/app/src/lib/api/comments.ts",[],"/usr/src/app/src/config.js",[],["149","150"],{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","severity":1,"message":"156","line":50,"column":11,"nodeType":"157","messageId":"158","endLine":50,"endColumn":22},{"ruleId":"155","severity":1,"message":"159","line":53,"column":10,"nodeType":"157","messageId":"158","endLine":53,"endColumn":15},{"ruleId":"160","severity":1,"message":"161","line":84,"column":6,"nodeType":"162","endLine":84,"endColumn":8,"suggestions":"163"},{"ruleId":"160","severity":1,"message":"164","line":139,"column":6,"nodeType":"162","endLine":139,"endColumn":8,"suggestions":"165"},{"ruleId":"155","severity":1,"message":"159","line":42,"column":10,"nodeType":"157","messageId":"158","endLine":42,"endColumn":15},{"ruleId":"155","severity":1,"message":"166","line":14,"column":8,"nodeType":"157","messageId":"158","endLine":14,"endColumn":20},{"ruleId":"155","severity":1,"message":"167","line":16,"column":10,"nodeType":"157","messageId":"158","endLine":16,"endColumn":18},{"ruleId":"155","severity":1,"message":"168","line":40,"column":7,"nodeType":"157","messageId":"158","endLine":40,"endColumn":19},{"ruleId":"155","severity":1,"message":"169","line":53,"column":10,"nodeType":"157","messageId":"158","endLine":53,"endColumn":17},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],"@typescript-eslint/no-unused-vars","'currentUser' is assigned a value but never used.","Identifier","unusedVar","'posts' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleGetPosts'. Either include it or remove the dependency array. If 'handleGetPosts' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["172"],"React Hook useEffect has a missing dependency: 'handleGetUserPages'. Either include it or remove the dependency array.",["173"],"'AlertMessage' is defined but never used.","'getUsers' is defined but never used.","'borderStyles' is assigned a value but never used.","'loading' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},"Update the dependencies array to be: [handleGetPosts]",{"range":"178","text":"179"},"Update the dependencies array to be: [handleGetUserPages]",{"range":"180","text":"181"},[2334,2336],"[handleGetPosts]",[3532,3534],"[handleGetUserPages]"]