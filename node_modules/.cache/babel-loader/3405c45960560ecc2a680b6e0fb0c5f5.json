{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/src/components/pages/UserPages.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport { getChatRoom } from \"lib/api/chat_rooms\";\nimport { createMessage } from \"lib/api/messages\";\nimport { AuthContext } from \"App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  avatar: {\n    width: theme.spacing(10),\n    height: theme.spacing(10),\n    margin: \"0 auto\"\n  },\n  formWrapper: {\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    width: 340\n  },\n  textInputWrapper: {\n    width: \"100%\"\n  },\n  button: {\n    marginLeft: theme.spacing(1)\n  }\n}));\n\n// 個別のチャットルームページ\nconst UserPages = props => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const id = parseInt(props.match.params.id); // URLからidを取得\n\n  const [loading, setLoading] = useState(true);\n  const [otherUser, setOtherUser] = useState();\n  const [messages, setMeesages] = useState([]);\n  const [content, setContent] = useState(\"\");\n  useEffect(() => {\n    async function handleGetChatRoom() {\n      try {\n        const res = await getChatRoom(id);\n        console.log(res);\n\n        if ((res === null || res === void 0 ? void 0 : res.status) === 200) {\n          setOtherUser(res === null || res === void 0 ? void 0 : res.data.otherUser);\n          setMeesages(res === null || res === void 0 ? void 0 : res.data.messages);\n        } else {\n          console.log(\"No other user\");\n        }\n      } catch (err) {\n        console.log(err);\n      }\n\n      setLoading(false);\n    }\n\n    handleGetChatRoom();\n  }, [id]);\n\n  const createFormData = () => {\n    const formData = new FormData();\n    formData.append(\"chatRoomId\", String(id));\n    formData.append(\"userId\", String(currentUser === null || currentUser === void 0 ? void 0 : currentUser.id));\n    formData.append(\"content\", content); // formData.append(\"createdAt\", createdAt)\n\n    return formData;\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const data = createFormData();\n\n    try {\n      const res = await createMessage(data);\n      console.log(res);\n\n      if (res.status === 200) {\n        setMeesages([...messages, res.data.message]);\n        setContent(\"\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !loading ? /*#__PURE__*/_jsxDEV(motion.div, {\n      animate: {\n        x: 0\n      },\n      initial: {\n        x: 800\n      },\n      exit: {\n        x: -800\n      },\n      transition: {\n        duration: 0.4\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          maxWidth: 360\n        },\n        children: [messages.map((message, index) => {\n          var _message$createdAt;\n\n          return /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            justifyContent: message.userId === (otherUser === null || otherUser === void 0 ? void 0 : otherUser.id) ? \"flex-start\" : \"flex-end\",\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: [/*#__PURE__*/_jsxDEV(Box, {\n                borderRadius: message.userId === (otherUser === null || otherUser === void 0 ? void 0 : otherUser.id) ? \"30px 30px 30px 0px\" : \"30px 30px 0px 30px\",\n                bgcolor: message.userId === (otherUser === null || otherUser === void 0 ? void 0 : otherUser.id) ? \"#d3d3d3\" : \"#ffb6c1\",\n                color: message.userId === (otherUser === null || otherUser === void 0 ? void 0 : otherUser.id) ? \"#000000\" : \"#ffffff\",\n                m: 1,\n                border: 0,\n                style: {\n                  padding: \"1rem\"\n                },\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  component: \"p\",\n                  children: message.content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 132,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                component: \"p\",\n                color: \"textSecondary\",\n                style: {\n                  textAlign: message.userId === (otherUser === null || otherUser === void 0 ? void 0 : otherUser.id) ? \"left\" : \"right\"\n                },\n                children: iso8601ToDateTime(((_message$createdAt = message.createdAt) === null || _message$createdAt === void 0 ? void 0 : _message$createdAt.toString()) || \"100000000\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 23\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 21\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          justifyContent: \"center\",\n          style: {\n            marginTop: \"2rem\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            className: classes.formWrapper,\n            noValidate: true,\n            autoComplete: \"off\",\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              required: true,\n              multiline: true,\n              value: content,\n              onChange: e => setContent(e.target.value),\n              className: classes.textInputWrapper\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              disabled: !content ? true : false,\n              onClick: handleSubmit,\n              className: classes.button,\n              children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false);\n};\n\n_s(UserPages, \"BzYLDgjrVvIHNpapPr1lGn5O0Ao=\", false, function () {\n  return [useStyles];\n});\n\n_c = UserPages;\nexport default UserPages;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserPages\");","map":{"version":3,"sources":["/usr/src/app/src/components/pages/UserPages.tsx"],"names":["React","useEffect","useState","useContext","motion","makeStyles","Grid","Typography","TextField","Box","Button","SendIcon","getChatRoom","createMessage","AuthContext","useStyles","theme","avatar","width","spacing","height","margin","formWrapper","padding","display","alignItems","textInputWrapper","button","marginLeft","UserPages","props","classes","currentUser","id","parseInt","match","params","loading","setLoading","otherUser","setOtherUser","messages","setMeesages","content","setContent","handleGetChatRoom","res","console","log","status","data","err","createFormData","formData","FormData","append","String","handleSubmit","e","preventDefault","message","x","duration","maxWidth","map","index","userId","textAlign","iso8601ToDateTime","createdAt","toString","marginTop","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\"\nimport { RouteComponentProps } from \"react-router-dom\"\nimport { motion } from \"framer-motion\";\n\nimport { makeStyles, Theme } from \"@material-ui/core/styles\"\nimport { Grid, Typography } from \"@material-ui/core\"\nimport Avatar from \"@material-ui/core/Avatar\"\nimport TextField from \"@material-ui/core/TextField\"\nimport Box from \"@material-ui/core/Box\"\nimport Button from \"@material-ui/core/Button\"\nimport SendIcon from \"@material-ui/icons/Send\"\n\nimport { getChatRoom } from \"lib/api/chat_rooms\"\nimport { createMessage } from \"lib/api/messages\"\nimport { User, MessageData } from \"interfaces/index\"\n\nimport { ChatRoomFormData } from \"interfaces/index\"\n\nimport { AuthContext } from \"App\"\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  avatar: {\n    width: theme.spacing(10),\n    height: theme.spacing(10),\n    margin: \"0 auto\"\n  },\n  formWrapper: {\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    width: 340\n  },\n  textInputWrapper: {\n    width: \"100%\"\n  },\n  button: {\n    marginLeft: theme.spacing(1)\n  }\n}))\n\ntype ChatRoomProps = RouteComponentProps<{ id: string }>\n\n// 個別のチャットルームページ\nconst UserPages: React.FC<ChatRoomProps> = (props) => {\n  const classes = useStyles()\n\n  const { currentUser } = useContext(AuthContext)\n  const id = parseInt(props.match.params.id) // URLからidを取得\n\n  const [loading, setLoading] = useState<boolean>(true)\n  const [otherUser, setOtherUser] = useState<User>()\n  const [messages, setMeesages] = useState<MessageData[]>([])\n  const [content, setContent] = useState<string>(\"\")\n\n\n\n  useEffect(() => {\n    async function handleGetChatRoom() {\n      try {\n        const res = await getChatRoom(id)\n        console.log(res)\n\n        if (res?.status === 200) {\n          setOtherUser(res?.data.otherUser)\n          setMeesages(res?.data.messages)\n        } else {\n          console.log(\"No other user\")\n        }\n      } catch (err) {\n        console.log(err)\n      }\n\n      setLoading(false)\n    }\n    handleGetChatRoom()\n  }, [id])\n\n  const createFormData = (): ChatRoomFormData => {\n    const formData = new FormData()\n\n    formData.append(\"chatRoomId\", String(id))\n    formData.append(\"userId\", String(currentUser?.id))\n    formData.append(\"content\", content)\n    // formData.append(\"createdAt\", createdAt)\n\n    return formData\n  }\n\n  const handleSubmit = async (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault()\n\n    const data = createFormData()\n\n    try {\n      const res = await createMessage(data)\n      console.log(res)\n\n      if (res.status === 200) {\n        setMeesages([...messages, res.data.message])\n        setContent(\"\")\n      }\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n\n  return (\n    <>\n      {\n        !loading ? (\n          <motion.div\n            animate={{ x: 0 }}\n            initial={{ x: 800 }}\n            exit={{ x: -800 }}\n            transition={{ duration: 0.4 }}>\n            <div style={{ maxWidth: 360 }}>\n\n              {\n                messages.map((message: MessageData, index: number) => {\n                  return (\n                    <Grid key={index} container justifyContent={message.userId === otherUser?.id ? \"flex-start\" : \"flex-end\"}>\n                      <Grid item>\n                        <Box\n                          borderRadius={message.userId === otherUser?.id ? \"30px 30px 30px 0px\" : \"30px 30px 0px 30px\"}\n                          bgcolor={message.userId === otherUser?.id ? \"#d3d3d3\" : \"#ffb6c1\"}\n                          color={message.userId === otherUser?.id ? \"#000000\" : \"#ffffff\"}\n                          m={1}\n                          border={0}\n                          style={{ padding: \"1rem\" }}\n                        >\n                          <Typography variant=\"body1\" component=\"p\">\n                            {message.content}\n                          </Typography>\n                        </Box>\n                        <Typography\n                          variant=\"body2\"\n                          component=\"p\"\n                          color=\"textSecondary\"\n                          style={{ textAlign: message.userId === otherUser?.id ? \"left\" : \"right\" }}\n                        >\n                          {iso8601ToDateTime(message.createdAt?.toString() || \"100000000\")}\n                        </Typography>\n                      </Grid>\n                    </Grid>\n                  )\n                })\n              }\n              <Grid container justifyContent=\"center\" style={{ marginTop: \"2rem\" }}>\n                <form className={classes.formWrapper} noValidate autoComplete=\"off\">\n                  <TextField\n                    required\n                    multiline\n                    value={content}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setContent(e.target.value)}\n                    className={classes.textInputWrapper}\n                  />\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={!content ? true : false}\n                    onClick={handleSubmit}\n                    className={classes.button}\n                  >\n                    <SendIcon />\n                  </Button>\n                </form>\n              </Grid>\n            </div>\n          </motion.div>\n        ) : (\n          <></>\n        )\n      }\n    </>\n  )\n}\n\nexport default UserPages\n"]},"metadata":{},"sourceType":"module"}