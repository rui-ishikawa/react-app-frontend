{"ast":null,"code":"var _jsxFileName = \"/Users/ago/rails-react-app/frontend/src/components/pages/ChatRoom.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport { getChatRoom } from \"lib/api/chat_rooms\";\nimport { createMessage } from \"lib/api/messages\";\nimport { AuthContext } from \"App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  avatar: {\n    width: theme.spacing(10),\n    height: theme.spacing(10),\n    margin: \"0 auto\"\n  },\n  formWrapper: {\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    width: 340\n  },\n  textInputWrapper: {\n    width: \"100%\"\n  },\n  button: {\n    marginLeft: theme.spacing(1)\n  }\n}));\n\n// 個別のチャットルームページ\nconst ChatRoom = props => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const id = parseInt(props.match.params.id); // URLからidを取得\n\n  const [loading, setLoading] = useState(true);\n  const [otherUser, setOtherUser] = useState();\n  const [messages, setMeesages] = useState([]);\n  const [content, setContent] = useState(\"\");\n\n  const handleGetChatRoom = async () => {\n    try {\n      const res = await getChatRoom(id);\n      console.log(res);\n\n      if ((res === null || res === void 0 ? void 0 : res.status) === 200) {\n        setOtherUser(res === null || res === void 0 ? void 0 : res.data.otherUser);\n        setMeesages(res === null || res === void 0 ? void 0 : res.data.messages);\n      } else {\n        console.log(\"No other user\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    handleGetChatRoom();\n  }, []);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const data = {\n      chatRoomId: id,\n      userId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id,\n      content: content\n    };\n\n    try {\n      const res = await createMessage(data);\n      console.log(res);\n\n      if (res.status === 200) {\n        setMeesages([...messages, res.data.message]);\n        setContent(\"\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }; // Railsから渡ってくるtimestamp（ISO8601）をdatetimeに変換\n\n\n  const iso8601ToDateTime = iso8601 => {\n    const date = new Date(Date.parse(iso8601));\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    const hour = date.getHours();\n    const minute = date.getMinutes();\n    return year + \"年\" + month + \"月\" + day + \"日\" + hour + \"時\" + minute + \"分\";\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: 360\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        \"justify-content\": \"center\",\n        style: {\n          marginBottom: \"1rem\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: [/*#__PURE__*/_jsxDEV(Avatar, {\n            alt: \"avatar\",\n            src: (otherUser === null || otherUser === void 0 ? void 0 : otherUser.image.url) || \"\",\n            className: classes.avatar\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            component: \"p\",\n            gutterBottom: true,\n            style: {\n              marginTop: \"0.5rem\",\n              marginBottom: \"1rem\",\n              textAlign: \"center\"\n            },\n            children: otherUser === null || otherUser === void 0 ? void 0 : otherUser.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this), messages.map((message, index) => {\n        var _message$createdAt;\n\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          \"justify-content-content\": message.userId === (otherUser === null || otherUser === void 0 ? void 0 : otherUser.id) ? \"flex-start\" : \"flex-end\",\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              borderRadius: message.userId === (otherUser === null || otherUser === void 0 ? void 0 : otherUser.id) ? \"30px 30px 30px 0px\" : \"30px 30px 0px 30px\",\n              bgcolor: message.userId === (otherUser === null || otherUser === void 0 ? void 0 : otherUser.id) ? \"#d3d3d3\" : \"#ffb6c1\",\n              color: message.userId === (otherUser === null || otherUser === void 0 ? void 0 : otherUser.id) ? \"#000000\" : \"#ffffff\",\n              m: 1,\n              border: 0,\n              style: {\n                padding: \"1rem\"\n              },\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                component: \"p\",\n                children: message.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              component: \"p\",\n              color: \"textSecondary\",\n              style: {\n                textAlign: message.userId === (otherUser === null || otherUser === void 0 ? void 0 : otherUser.id) ? \"left\" : \"right\"\n              },\n              children: iso8601ToDateTime(((_message$createdAt = message.createdAt) === null || _message$createdAt === void 0 ? void 0 : _message$createdAt.toString()) || \"100000000\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 21\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 19\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        \"justify-content\": \"center\",\n        style: {\n          marginTop: \"2rem\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: classes.formWrapper,\n          noValidate: true,\n          autoComplete: \"off\",\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            required: true,\n            multiline: true,\n            value: content,\n            onChange: e => setContent(e.target.value),\n            className: classes.textInputWrapper\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            disabled: !content ? true : false,\n            onClick: handleSubmit,\n            className: classes.button,\n            children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false);\n};\n\n_s(ChatRoom, \"BzYLDgjrVvIHNpapPr1lGn5O0Ao=\", false, function () {\n  return [useStyles];\n});\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["/Users/ago/rails-react-app/frontend/src/components/pages/ChatRoom.tsx"],"names":["React","useEffect","useState","useContext","makeStyles","Grid","Typography","Avatar","TextField","Box","Button","SendIcon","getChatRoom","createMessage","AuthContext","useStyles","theme","avatar","width","spacing","height","margin","formWrapper","padding","display","alignItems","textInputWrapper","button","marginLeft","ChatRoom","props","classes","currentUser","id","parseInt","match","params","loading","setLoading","otherUser","setOtherUser","messages","setMeesages","content","setContent","handleGetChatRoom","res","console","log","status","data","err","handleSubmit","e","preventDefault","chatRoomId","userId","message","iso8601ToDateTime","iso8601","date","Date","parse","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","maxWidth","marginBottom","image","url","marginTop","textAlign","name","map","index","createdAt","toString","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\"\nimport { RouteComponentProps } from \"react-router-dom\"\n\nimport { makeStyles } from \"@material-ui/styles\"\nimport { Theme } from \"@material-ui/core/styles\"\nimport { Grid, Typography } from \"@material-ui/core\"\nimport Avatar from \"@material-ui/core/Avatar\"\nimport TextField from \"@material-ui/core/TextField\"\nimport Box from \"@material-ui/core/Box\"\nimport Button from \"@material-ui/core/Button\"\nimport SendIcon from \"@material-ui/icons/Send\"\n\nimport { getChatRoom } from \"lib/api/chat_rooms\"\nimport { createMessage } from \"lib/api/messages\"\nimport { User, Message } from \"interfaces/index\"\n\nimport { AuthContext } from \"App\"\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  avatar: {\n    width: theme.spacing(10),\n    height: theme.spacing(10),\n    margin: \"0 auto\"\n  },\n  formWrapper: {\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    width: 340\n  },\n  textInputWrapper: {\n    width: \"100%\"\n  },\n  button: {\n    marginLeft: theme.spacing(1)\n  }\n}))\n\ntype ChatRoomProps = RouteComponentProps<{ id: string }>\n\n// 個別のチャットルームページ\nconst ChatRoom: React.FC<ChatRoomProps> = (props) => {\n  const classes = useStyles()\n\n  const { currentUser } = useContext(AuthContext)\n  const id = parseInt(props.match.params.id) // URLからidを取得\n\n  const [loading, setLoading] = useState<boolean>(true)\n  const [otherUser, setOtherUser] = useState<User>()\n  const [messages, setMeesages] = useState<Message[]>([])\n  const [content, setContent] = useState<string>(\"\")\n\n  const handleGetChatRoom = async () => {\n    try {\n      const res = await getChatRoom(id)\n      console.log(res)\n\n      if (res?.status === 200) {\n        setOtherUser(res?.data.otherUser)\n        setMeesages(res?.data.messages)\n      } else {\n        console.log(\"No other user\")\n      }\n    } catch (err) {\n      console.log(err)\n    }\n\n    setLoading(false)\n  }\n\n  useEffect(() => {\n    handleGetChatRoom()\n  }, [])\n\n  const handleSubmit = async (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault()\n\n    const data: Message = {\n      chatRoomId: id,\n      userId: currentUser?.id,\n      content: content\n    }\n\n    try {\n      const res = await createMessage(data)\n      console.log(res)\n\n      if (res.status === 200) {\n        setMeesages([...messages, res.data.message])\n        setContent(\"\")\n      }\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  // Railsから渡ってくるtimestamp（ISO8601）をdatetimeに変換\n  const iso8601ToDateTime = (iso8601: string) => {\n    const date = new Date(Date.parse(iso8601))\n    const year = date.getFullYear()\n    const month = date.getMonth() + 1\n    const day = date.getDate()\n    const hour = date.getHours()\n    const minute = date.getMinutes()\n\n    return year + \"年\" + month + \"月\" + day + \"日\" + hour + \"時\" + minute + \"分\"\n  }\n\n  return (\n    <>\n      {\n        !loading ? (\n          <div style={{ maxWidth: 360 }}>\n            <Grid container justify-content=\"center\" style={{ marginBottom: \"1rem\" }}>\n              <Grid item>\n                <Avatar\n                  alt=\"avatar\"\n                  src={otherUser?.image.url || \"\"}\n                  className={classes.avatar}\n                />\n                <Typography\n                  variant=\"body2\"\n                  component=\"p\"\n                  gutterBottom\n                  style={{ marginTop: \"0.5rem\", marginBottom: \"1rem\", textAlign: \"center\" }}\n                >\n                  {otherUser?.name}\n                </Typography>\n              </Grid>\n            </Grid>\n            {\n              messages.map((message: Message, index: number) => {\n                return (\n                  <Grid key={index} container justify-content-content={message.userId === otherUser?.id ? \"flex-start\" : \"flex-end\"}>\n                    <Grid item>\n                      <Box\n                        borderRadius={message.userId === otherUser?.id ? \"30px 30px 30px 0px\" : \"30px 30px 0px 30px\"}\n                        bgcolor={message.userId === otherUser?.id ? \"#d3d3d3\" : \"#ffb6c1\"}\n                        color={message.userId === otherUser?.id ? \"#000000\" : \"#ffffff\"}\n                        m={1}\n                        border={0}\n                        style={{ padding: \"1rem\" }}\n                      >\n                        <Typography variant=\"body1\" component=\"p\">\n                          {message.content}\n                        </Typography>\n                      </Box>\n                      <Typography\n                        variant=\"body2\"\n                        component=\"p\"\n                        color=\"textSecondary\"\n                        style={{ textAlign: message.userId === otherUser?.id ? \"left\" : \"right\" }}\n                      >\n                        {iso8601ToDateTime(message.createdAt?.toString() || \"100000000\")}\n                      </Typography>\n                    </Grid>\n                  </Grid>\n                )\n              })\n            }\n            <Grid container justify-content=\"center\" style={{ marginTop: \"2rem\" }}>\n              <form className={classes.formWrapper} noValidate autoComplete=\"off\">\n                <TextField\n                  required\n                  multiline\n                  value={content}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setContent(e.target.value)}\n                  className={classes.textInputWrapper}\n                />\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  disabled={!content ? true : false}\n                  onClick={handleSubmit}\n                  className={classes.button}\n                >\n                  <SendIcon />\n                </Button>\n              </form>\n            </Grid>\n          </div>\n        ) : (\n          <></>\n        )\n      }\n    </>\n  )\n}\n\nexport default ChatRoom\n"]},"metadata":{},"sourceType":"module"}