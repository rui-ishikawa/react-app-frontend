{"ast":null,"code":"var _jsxFileName = \"/Users/ago/rails-react-app/frontend/src/components/pages/ChatRooms.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport { getChatRooms } from \"lib/api/chat_rooms\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    minWidth: 340,\n    maxWidth: \"100%\"\n  },\n  link: {\n    textDecoration: \"none\",\n    color: \"inherit\"\n  }\n})); // チャットルーム一覧ページ\n\nconst ChatRooms = () => {\n  _s();\n\n  const classes = useStyles();\n  const [loading, setLoading] = useState(true);\n  const [chatRooms, setChatRooms] = useState([]);\n\n  const handleGetChatRooms = async () => {\n    try {\n      const res = await getChatRooms();\n\n      if (res.status === 200) {\n        setChatRooms(res.data.chatRooms);\n      } else {\n        console.log(\"No chat rooms\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    handleGetChatRooms();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !loading ? chatRooms.length > 0 ? chatRooms.map((chatRoom, index) => {\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        \"justify-content\": \"center\",\n        children: /*#__PURE__*/_jsxDEV(List, {\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: `/chatroom/${chatRoom.chatRoom.id}`,\n            className: classes.link,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.root,\n              children: /*#__PURE__*/_jsxDEV(ListItem, {\n                alignItems: \"flex-start\",\n                style: {\n                  padding: 0\n                },\n                children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n                  children: /*#__PURE__*/_jsxDEV(Avatar, {\n                    alt: \"avatar\",\n                    src: chatRoom.otherUser.image.url\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 71,\n                    columnNumber: 29\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 70,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: chatRoom.otherUser.name,\n                  secondary: /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: {\n                      marginTop: \"0.5rem\"\n                    },\n                    children: /*#__PURE__*/_jsxDEV(Typography, {\n                      component: \"span\",\n                      variant: \"body2\",\n                      color: \"textSecondary\",\n                      children: chatRoom.lastMessage === null ? \"まだメッセージはありません。\" : chatRoom.lastMessage.content.length > 30 ? chatRoom.lastMessage.content.substr(0, 30) + \"...\" : chatRoom.lastMessage.content\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 80,\n                      columnNumber: 33\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 79,\n                    columnNumber: 31\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            component: \"li\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 19\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(Typography, {\n      component: \"p\",\n      variant: \"body2\",\n      color: \"textSecondary\",\n      children: \"\\u30DE\\u30C3\\u30C1\\u30F3\\u30B0\\u4E2D\\u306E\\u76F8\\u624B\\u306F\\u3044\\u307E\\u305B\\u3093\\u3002\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false);\n};\n\n_s(ChatRooms, \"mIEbRcOuI88zos1OHeLYJMSJ7e4=\", false, function () {\n  return [useStyles];\n});\n\n_c = ChatRooms;\nexport default ChatRooms;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRooms\");","map":{"version":3,"sources":["/Users/ago/rails-react-app/frontend/src/components/pages/ChatRooms.tsx"],"names":["React","useEffect","useState","Link","makeStyles","Grid","Typography","Avatar","List","ListItem","Divider","ListItemText","ListItemAvatar","getChatRooms","useStyles","theme","root","flexGrow","minWidth","maxWidth","link","textDecoration","color","ChatRooms","classes","loading","setLoading","chatRooms","setChatRooms","handleGetChatRooms","res","status","data","console","log","err","length","map","chatRoom","index","id","padding","otherUser","image","url","name","marginTop","lastMessage","content","substr"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { Link } from \"react-router-dom\"\n\nimport { makeStyles } from \"@material-ui/styles\"\nimport { Theme } from \"@material-ui/core/styles\"\nimport { Grid, Typography } from \"@material-ui/core\"\nimport Avatar from \"@material-ui/core/Avatar\"\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\n\nimport { getChatRooms } from \"lib/api/chat_rooms\"\nimport { ChatRoom } from \"interfaces/index\"\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    flexGrow: 1,\n    minWidth: 340,\n    maxWidth: \"100%\"\n  },\n  link: {\n    textDecoration: \"none\",\n    color: \"inherit\"\n  }\n}))\n\n// チャットルーム一覧ページ\nconst ChatRooms: React.FC = () => {\n  const classes = useStyles()\n\n  const [loading, setLoading] = useState<boolean>(true)\n  const [chatRooms, setChatRooms] = useState<ChatRoom[]>([])\n\n  const handleGetChatRooms = async () => {\n    try {\n      const res = await getChatRooms()\n\n      if (res.status === 200) {\n        setChatRooms(res.data.chatRooms)\n      } else {\n        console.log(\"No chat rooms\")\n      }\n    } catch (err) {\n      console.log(err)\n    }\n\n    setLoading(false)\n  }\n\n  useEffect(() => {\n    handleGetChatRooms()\n  }, [])\n\n  return (\n    <>\n      {\n        !loading ? (\n          chatRooms.length > 0 ? (\n            chatRooms.map((chatRoom: ChatRoom, index: number) => {\n              return (\n                <Grid container key={index} justify-content=\"center\">\n                  <List>\n                    {/* 個別のチャットルームへ飛ばす */}\n                    <Link to={`/chatroom/${chatRoom.chatRoom.id}`} className={classes.link}>\n                      <div className={classes.root}>\n                        <ListItem alignItems=\"flex-start\" style={{ padding: 0 }}>\n                          <ListItemAvatar>\n                            <Avatar\n                              alt=\"avatar\"\n                              src={chatRoom.otherUser.image.url}\n                            />\n                          </ListItemAvatar>\n                          <ListItemText\n                            primary={chatRoom.otherUser.name}\n                            secondary={\n                              <div style={{ marginTop: \"0.5rem\" }}>\n                                <Typography\n                                  component=\"span\"\n                                  variant=\"body2\"\n                                  color=\"textSecondary\"\n                                >\n                                  {chatRoom.lastMessage === null ? \"まだメッセージはありません。\" : chatRoom.lastMessage.content.length > 30 ? chatRoom.lastMessage.content.substr(0, 30) + \"...\" : chatRoom.lastMessage.content}\n                                </Typography>\n                              </div>\n                            }\n                          />\n                        </ListItem>\n                      </div>\n                    </Link>\n                    <Divider component=\"li\" />\n                  </List>\n                </Grid>\n              )\n            })\n          ) : (\n            <Typography\n              component=\"p\"\n              variant=\"body2\"\n              color=\"textSecondary\"\n            >\n              マッチング中の相手はいません。\n            </Typography>\n          )\n        ) : (\n          <></>\n        )\n      }\n    </>\n  )\n}\n\nexport default ChatRooms\n"]},"metadata":{},"sourceType":"module"}