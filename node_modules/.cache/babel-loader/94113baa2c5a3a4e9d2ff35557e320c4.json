{"ast":null,"code":"import axios from \"axios\"; // applyCaseMiddleware:\n// axiosで受け取ったレスポンスの値をスネークケース→キャメルケースに変換\n// または送信するリクエストの値をキャメルケース→スネークケースに変換してくれるライブラリ\n// ヘッダーに関してはケバブケースのままで良いので適用を無視するオプションを追加\n\nconst options = {\n  ignoreHeaders: true\n}; // const client = applyCaseMiddleware(axios.create({\n//   baseURL: \"http://localhost:3001/api/v1\"\n// }), options)\n\nlet client;\nexport default client = axios.create({\n  baseURL: \"http://localhost:3001/api/v1\",\n  headers: {\n    \"Content-Type\": \"multipart/form-data\" // 画像ファイルを取り扱うのでform-dataで送信\n\n  }\n});\nclient.interceptors.response.use(response => {\n  const data = response.data;\n  return { ...response.data,\n    data\n  };\n});","map":{"version":3,"sources":["/Users/ago/rails-react-app/frontend/src/lib/api/client.ts"],"names":["axios","options","ignoreHeaders","client","create","baseURL","headers","interceptors","response","use","data"],"mappings":"AACA,OAAOA,KAAP,MAAoD,OAApD,C,CAGA;AACA;AACA;AAEA;;AACA,MAAMC,OAAO,GAAG;AACdC,EAAAA,aAAa,EAAE;AADD,CAAhB,C,CAIA;AACA;AACA;;AAEA,IAAIC,MAAJ;AAEA,eAAeA,MAAM,GAAGH,KAAK,CAACI,MAAN,CAAa;AACnCC,EAAAA,OAAO,EAAE,8BAD0B;AAEnCC,EAAAA,OAAO,EAAE;AACP,oBAAgB,qBADT,CAC+B;;AAD/B;AAF0B,CAAb,CAAxB;AAOAH,MAAM,CAACI,YAAP,CAAoBC,QAApB,CAA6BC,GAA7B,CACGD,QAAD,IAA4C;AAC1C,QAAME,IAAI,GAAGF,QAAQ,CAACE,IAAtB;AACA,SAAO,EAAE,GAAGF,QAAQ,CAACE,IAAd;AAAoBA,IAAAA;AAApB,GAAP;AACD,CAJH","sourcesContent":["import applyCaseMiddleware from \"axios-case-converter\"\nimport axios, { AxiosInstance, AxiosResponse } from \"axios\"\n\n\n// applyCaseMiddleware:\n// axiosで受け取ったレスポンスの値をスネークケース→キャメルケースに変換\n// または送信するリクエストの値をキャメルケース→スネークケースに変換してくれるライブラリ\n\n// ヘッダーに関してはケバブケースのままで良いので適用を無視するオプションを追加\nconst options = {\n  ignoreHeaders: true\n}\n\n// const client = applyCaseMiddleware(axios.create({\n//   baseURL: \"http://localhost:3001/api/v1\"\n// }), options)\n\nlet client: AxiosInstance\n\nexport default client = axios.create({\n  baseURL: \"http://localhost:3001/api/v1\",\n  headers: {\n    \"Content-Type\": \"multipart/form-data\" // 画像ファイルを取り扱うのでform-dataで送信\n  }\n})\n\nclient.interceptors.response.use(\n  (response: AxiosResponse): AxiosResponse => {\n    const data = response.data\n    return { ...response.data, data }\n  }\n)\n"]},"metadata":{},"sourceType":"module"}