{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/src/components/post/PostComment.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { styled } from '@material-ui/core/styles';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { createComment } from \"../../lib/api/comments\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  form: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    width: 480\n  },\n  inputFileBtn: {\n    marginTop: \"10px\"\n  },\n  submitBtn: {\n    marginTop: \"10px\",\n    marginLeft: \"auto\"\n  },\n  formWrapper: {\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    width: \"100%\"\n  },\n  textInputWrapper: {\n    width: \"80%\"\n  },\n  button: {\n    marginLeft: theme.spacing(1)\n  }\n}));\nconst Input = styled(\"input\")({\n  display: \"none\"\n});\nconst borderStyles = {\n  bgcolor: \"background.paper\",\n  border: 1\n};\n\nconst PostComment = props => {\n  _s();\n\n  const classes = useStyles();\n  const [content, setContent] = useState(\"\");\n  const [comments, setComments] = useState([]);\n\n  const createFormData = () => {\n    const formData = new FormData();\n    formData.append(\"content\", content);\n    return formData;\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const data = createFormData();\n    await createComment(data).then(() => {\n      setContent(\"\");\n      console.log(data);\n    });\n  }; // Railsから渡ってくるtimestamp（ISO8601）をdatetimeに変換\n\n\n  const iso8601ToDateTime = iso8601 => {\n    const date = new Date(Date.parse(iso8601));\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    const hour = date.getHours();\n    const minute = date.getMinutes();\n    return year + \"年\" + month + \"月\" + day + \"日\" + hour + \"時\" + minute + \"分\";\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [comments.map((comment, index) => {\n      var _comment$createdAt;\n\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        justifyContent: \"flex-start\",\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            component: \"p\",\n            children: comment.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            component: \"p\",\n            color: \"textSecondary\",\n            children: iso8601ToDateTime(((_comment$createdAt = comment.createdAt) === null || _comment$createdAt === void 0 ? void 0 : _comment$createdAt.toString()) || \"100000000\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: classes.formWrapper,\n      noValidate: true,\n      autoComplete: \"off\",\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        required: true,\n        multiline: true,\n        value: content,\n        onChange: e => setContent(e.target.value),\n        className: classes.textInputWrapper\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        disabled: !content ? true : false,\n        onClick: handleSubmit,\n        className: classes.button,\n        children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(PostComment, \"FB+0pcTIXFPZfB8q7zn9giXGP7o=\", false, function () {\n  return [useStyles];\n});\n\n_c = PostComment;\nexport default PostComment;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostComment\");","map":{"version":3,"sources":["/usr/src/app/src/components/post/PostComment.tsx"],"names":["React","useState","styled","makeStyles","TextField","Button","SendIcon","Grid","Typography","createComment","useStyles","theme","form","display","flexWrap","width","inputFileBtn","marginTop","submitBtn","marginLeft","formWrapper","padding","alignItems","textInputWrapper","button","spacing","Input","borderStyles","bgcolor","border","PostComment","props","classes","content","setContent","comments","setComments","createFormData","formData","FormData","append","handleSubmit","e","preventDefault","data","then","console","log","iso8601ToDateTime","iso8601","date","Date","parse","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","map","comment","index","createdAt","toString","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\nimport { RouteComponentProps } from \"react-router-dom\"\n\nimport { styled } from '@material-ui/core/styles';\nimport { makeStyles, Theme } from \"@material-ui/core/styles\"\nimport TextField from \"@material-ui/core/TextField\"\nimport Button from \"@material-ui/core/Button\"\nimport SendIcon from \"@material-ui/icons/Send\"\nimport { Grid, Typography } from \"@material-ui/core\"\n\nimport { createComment } from \"../../lib/api/comments\"\nimport { CommentFormData } from \"interfaces/index\"\nimport { CommentData } from \"interfaces/index\"\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  form: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    width: 480\n  },\n  inputFileBtn: {\n    marginTop: \"10px\"\n  },\n  submitBtn: {\n    marginTop: \"10px\",\n    marginLeft: \"auto\"\n  },\n  formWrapper: {\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    width: \"100%\"\n  },\n  textInputWrapper: {\n    width: \"80%\"\n  },\n  button: {\n    marginLeft: theme.spacing(1)\n  }\n}))\n\nconst Input = styled(\"input\")({\n  display: \"none\"\n})\n\nconst borderStyles = {\n  bgcolor: \"background.paper\",\n  border: 1,\n}\n\ntype CommentProps = { content?: string }\n\nconst PostComment: React.FC<CommentProps> = (props) => {\n  const classes = useStyles()\n\n  const [content, setContent] = useState<string>(\"\")\n  const [comments, setComments] = useState<CommentData[]>([])\n\n  const createFormData = (): CommentFormData => {\n    const formData = new FormData()\n\n    formData.append(\"content\", content)\n    return formData\n  }\n\n  const handleSubmit = async (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault()\n\n    const data = createFormData()\n\n    await createComment(data)\n      .then(() => {\n        setContent(\"\")\n        console.log(data)\n      })\n  }\n\n  // Railsから渡ってくるtimestamp（ISO8601）をdatetimeに変換\n  const iso8601ToDateTime = (iso8601: string) => {\n    const date = new Date(Date.parse(iso8601))\n    const year = date.getFullYear()\n    const month = date.getMonth() + 1\n    const day = date.getDate()\n    const hour = date.getHours()\n    const minute = date.getMinutes()\n\n    return year + \"年\" + month + \"月\" + day + \"日\" + hour + \"時\" + minute + \"分\"\n  }\n\n\n  return (\n    <>\n      {\n        comments.map((comment: CommentData, index: number) => {\n          return (\n            <Grid key={index} container justifyContent=\"flex-start\" >\n              <Grid item>\n                <Typography variant=\"body1\" component=\"p\">\n                  {comment.content}\n                </Typography>\n                <Typography\n                  variant=\"body2\"\n                  component=\"p\"\n                  color=\"textSecondary\"\n                >\n                  {iso8601ToDateTime(comment.createdAt?.toString() || \"100000000\")}\n                </Typography>\n              </Grid>\n            </Grid>\n          )\n        })\n      }\n      <form className={classes.formWrapper} noValidate autoComplete=\"off\" >\n        <TextField\n          required\n          multiline\n          value={content}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setContent(e.target.value)}\n          className={classes.textInputWrapper}\n        />\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={!content ? true : false}\n          onClick={handleSubmit}\n          className={classes.button}\n        >\n          <SendIcon />\n        </Button>\n      </form>\n    </>\n  )\n}\n\nexport default PostComment\n"]},"metadata":{},"sourceType":"module"}